CRITICAL.md:**Workaround**: Review `~/.guardrail/logs/` if files aren't saved. Use `--no-auto-save` flag for manual control.
CRITICAL.md:**Workaround**: Manually review which guardrails are applied. Add keywords to custom rules.
CRITICAL.md:   - Dynamic guardrail generation
CRITICAL.md:   - Instant guardrail loading (0.22ms cached vs 300ms cold)
CRITICAL.md:   - **Trigger**: Complex prompts + many guardrails + full agent chain
CRITICAL.md:   - **Workaround**: Use `--mode standard` or reduce guardrail scope
CRITICAL.md:- Need basic Claude CLI guardrail enforcement
CRITICAL.md:1. **Check logs**: `~/.guardrail/logs/guardrail.log`
CRITICAL.md:tail -50 ~/.guardrail/logs/guardrail.log
CRITICAL.md:- üìß **Security issue?** Email security@guardrail.dev (if set up)
FINAL_PROJECT_SUMMARY.md:- `guardrail-wrapper.sh` - Shell wrapper for AI tools
FINAL_PROJECT_SUMMARY.md:- Entry points: `guardrail`, `guardrail-wrapper`
FINAL_PROJECT_SUMMARY.md:- Configurable guardrail repositories (local or team-sync)
FINAL_PROJECT_SUMMARY.md:- Support for custom guardrail markdown files
FINAL_PROJECT_SUMMARY.md:pip install guardrail
FINAL_PROJECT_SUMMARY.md:- Source distribution: guardrail-1.0.0.tar.gz (54KB)
FINAL_PROJECT_SUMMARY.md:- Wheel distribution: guardrail-1.0.0-py3-none-any.whl (61KB)
FINAL_PROJECT_SUMMARY.md:- URL: https://github.com/guardrail-dev/guardrail
FINAL_PROJECT_SUMMARY.md:- Landing Page: https://guardrail.dev
FINAL_PROJECT_SUMMARY.md:- Documentation: https://docs.guardrail.dev
FINAL_PROJECT_SUMMARY.md:- API Reference: https://docs.guardrail.dev/api
FINAL_PROJECT_SUMMARY.md:pip install guardrail
FINAL_PROJECT_SUMMARY.md:guardrail init
FINAL_PROJECT_SUMMARY.md:guardrail execute --tool claude --prompt "implement user authentication"
FINAL_PROJECT_SUMMARY.md:guardrail validate --file auth.py --agent secops
FINAL_PROJECT_SUMMARY.md:guardrail analyze --path ./src --agent architect
FINAL_PROJECT_SUMMARY.md:$ guardrail execute --mode strict --tool claude --prompt "create auth system"
FINAL_PROJECT_SUMMARY.md:4. **Twitter/X** - @guardraildev
FINAL_PROJECT_SUMMARY.md:1. **Transparent Wrapper**: `claude "prompt"` automatically applies guardrails
FINAL_PROJECT_SUMMARY.md:2. **Explicit CLI**: `guardrail execute --tool claude --prompt "..."`
FINAL_PROJECT_SUMMARY.md:3. **Validation Only**: `guardrail validate --file code.py`
FINAL_PROJECT_SUMMARY.md:4. **Analysis**: `guardrail analyze --path ./src`
FINAL_PROJECT_SUMMARY.md:# ~/.guardrail/config.yaml
FINAL_PROJECT_SUMMARY.md:  path: ~/.guardrail/guardrail.db
FINAL_PROJECT_SUMMARY.md:  file: ~/.guardrail/logs/guardrail.log
FINAL_PROJECT_SUMMARY.md:guardrails:
FINAL_PROJECT_SUMMARY.md:  base_path: ~/.guardrail/guardrails
FINAL_PROJECT_SUMMARY.md:  agents_path: ~/.guardrail/guardrails/agents
FINAL_PROJECT_SUMMARY.md:- Landing Page: https://guardrail.dev
FINAL_PROJECT_SUMMARY.md:- Docs: https://docs.guardrail.dev
FINAL_PROJECT_SUMMARY.md:- API: https://docs.guardrail.dev/api
FINAL_PROJECT_SUMMARY.md:- GitHub Wiki: https://github.com/guardrail-dev/guardrail/wiki
FINAL_PROJECT_SUMMARY.md:git clone https://github.com/guardrail-dev/guardrail.git
FINAL_PROJECT_SUMMARY.md:cd guardrail
FINAL_PROJECT_SUMMARY.md:pytest --cov=src/guardrail --cov-report=html
FINAL_PROJECT_SUMMARY.md:guardrail/
FINAL_PROJECT_SUMMARY.md:‚îú‚îÄ‚îÄ src/guardrail/           # Main package
FINAL_PROJECT_SUMMARY.md:‚îú‚îÄ‚îÄ guardrails/              # Built-in guardrails
FINAL_PROJECT_SUMMARY.md:- Twitter: @guardraildev
FINAL_PROJECT_SUMMARY.md:- Email: support@guardrail.dev
FINAL_PROJECT_SUMMARY.md:Copyright (c) 2025 guardrail.dev
HOW_TO_TEST.md:guardrail init
HOW_TO_TEST.md:‚úÖ Created: /home/user/.guardrail/
HOW_TO_TEST.md:‚úÖ Config: /home/user/.guardrail/config.yaml
HOW_TO_TEST.md:guardrail run claude "create a simple login function" --mode standard
HOW_TO_TEST.md:2. ‚úÖ Adds guardrail rules to the prompt
HOW_TO_TEST.md:   [Your prompt + organization guardrails]
HOW_TO_TEST.md:sqlite3 ~/.guardrail/data/guardrail.db "SELECT session_id, tool, agent, mode, datetime(timestamp) FROM sessions ORDER BY timestamp DESC LIMIT 5;"
HOW_TO_TEST.md:sqlite3 ~/.guardrail/data/guardrail.db "SELECT rule_violated, severity, description FROM violations ORDER BY timestamp DESC LIMIT 5;"
HOW_TO_TEST.md:tail -20 ~/.guardrail/logs/guardrail.log
HOW_TO_TEST.md:guardrail validate --file test_auth.py --agent secops
HOW_TO_TEST.md:sqlite3 ~/.guardrail/data/guardrail.db "SELECT COUNT(*) FROM violations WHERE severity = 'critical';"
HOW_TO_TEST.md:guardrail run claude "create authentication" --mode standard
HOW_TO_TEST.md:guardrail run claude "create authentication without MFA" --mode strict
HOW_TO_TEST.md:guardrail run claude "implement user authentication" --mode standard
HOW_TO_TEST.md:guardrail run claude "design a scalable API" --mode standard --agent architect
HOW_TO_TEST.md:guardrail run claude "write a function to parse JSON" --mode standard
HOW_TO_TEST.md:sqlite3 ~/.guardrail/data/guardrail.db "SELECT agent, COUNT(*) FROM sessions GROUP BY agent;"
HOW_TO_TEST.md:tail -f ~/.guardrail/logs/guardrail.log
HOW_TO_TEST.md:guardrail run claude "create a REST API" --mode standard
HOW_TO_TEST.md:2025-10-04 16:30:15 [info] Enhanced prompt with guardrails
HOW_TO_TEST.md:# Check guardrails directory
HOW_TO_TEST.md:ls -la ~/.guardrail/guardrails/
HOW_TO_TEST.md:rm ~/.guardrail/data/guardrail.db
HOW_TO_TEST.md:guardrail init
HOW_TO_TEST.md:3. ‚úÖ **Database entries** in `~/.guardrail/data/guardrail.db`
HOW_TO_TEST.md:4. ‚úÖ **Log entries** in `~/.guardrail/logs/guardrail.log`
HOW_TO_TEST.md:if command -v guardrail &> /dev/null; then
HOW_TO_TEST.md:    echo "   ‚úÖ Guardrail installed: $(guardrail --version)"
HOW_TO_TEST.md:if [ -f ~/.guardrail/config.yaml ]; then
HOW_TO_TEST.md:    echo "   ‚ùå Config missing - run: guardrail init"
HOW_TO_TEST.md:if [ -f ~/.guardrail/data/guardrail.db ]; then
HOW_TO_TEST.md:    SESSIONS=$(sqlite3 ~/.guardrail/data/guardrail.db "SELECT COUNT(*) FROM sessions;")
HOW_TO_TEST.md:    echo "   ‚ùå Database missing - run: guardrail init"
HOW_TO_TEST.md:# 4. Check guardrails
HOW_TO_TEST.md:echo "4. Checking guardrails..."
HOW_TO_TEST.md:GUARDRAIL_COUNT=$(ls ~/.guardrail/guardrails/*.md 2>/dev/null | wc -l)
HOW_TO_TEST.md:    echo "   ‚úÖ ${GUARDRAIL_COUNT} guardrail files found"
HOW_TO_TEST.md:    echo "   ‚ùå No guardrails found"
HOW_TO_TEST.md:echo "  1. Run: guardrail run claude 'test' --mode standard"
HOW_TO_TEST.md:echo "  2. Check: sqlite3 ~/.guardrail/data/guardrail.db 'SELECT * FROM sessions;'"
HOW_TO_TEST.md:echo "  3. View logs: tail ~/.guardrail/logs/guardrail.log"
HOW_TO_TEST.md:Save this as `verify-guardrail.sh`, make it executable, and run it:
HOW_TO_TEST.md:chmod +x verify-guardrail.sh
HOW_TO_TEST.md:./verify-guardrail.sh
HOW_TO_TEST.md:2. **Configure custom guardrails** for your organization
MANIFEST.in:recursive-include guardrails *.md
PHASE_2_SUMMARY.md:**Location**: `src/guardrail/core/context_manager.py`
PHASE_2_SUMMARY.md:  - `load_guardrails()` - Load and cache guardrail documents
PHASE_2_SUMMARY.md:  - `_load_agent_instructions()` - Agent-specific guardrail loading
PHASE_2_SUMMARY.md:  - `get_guardrail_files_status()` - File existence checking
PHASE_2_SUMMARY.md:- ‚úÖ Error handling for missing guardrail files
PHASE_2_SUMMARY.md:- ‚úÖ Support for custom guardrail paths
PHASE_2_SUMMARY.md:<guardrails>
PHASE_2_SUMMARY.md:</guardrails>
PHASE_2_SUMMARY.md:- `src/guardrail/adapters/base.py` - Base adapter
PHASE_2_SUMMARY.md:- `src/guardrail/adapters/claude.py` - Claude adapter
PHASE_2_SUMMARY.md:- `src/guardrail/adapters/gemini.py` - Gemini adapter
PHASE_2_SUMMARY.md:- `src/guardrail/adapters/codex.py` - Codex adapter
PHASE_2_SUMMARY.md:- `src/guardrail/adapters/__init__.py` - Factory and exports
PHASE_2_SUMMARY.md:**Location**: `src/guardrail/core/parser.py`
PHASE_2_SUMMARY.md:**Location**: `src/guardrail/core/validator.py`
PHASE_2_SUMMARY.md:   - `_check_bpsbs(parsed, text)` - BPSBS guardrails
PHASE_2_SUMMARY.md:   - `_check_ai_guardrails(parsed, text)` - AI guardrails
PHASE_2_SUMMARY.md:   - `_check_ux_ui(parsed, text)` - UX/UI guardrails
PHASE_2_SUMMARY.md:       guardrail_type: str
PHASE_2_SUMMARY.md:**Location**: `src/guardrail/core/failure_detector.py`
PHASE_2_SUMMARY.md:**Location**: `src/guardrail/core/logger.py`
PHASE_2_SUMMARY.md:   - AI guardrails checks
PHASE_2_SUMMARY.md:‚úÖ Intelligent guardrail loading with caching
PHASE_2_SUMMARY.md:‚úÖ Multi-file guardrail support
PHASE_2_SUMMARY.md:‚úÖ 3 guardrail types (BPSBS, AI, UX/UI)
PHASE_2_SUMMARY.md:   - Agent-specific guardrails
PHASE_2_SUMMARY.md:   - 13 agent-specific guardrails
PROJECT_SUMMARY.md:guardrail.dev/
PROJECT_SUMMARY.md:‚îú‚îÄ‚îÄ .gitignore                  ‚úÖ Standard Python + guardrail-specific
PROJECT_SUMMARY.md:‚îú‚îÄ‚îÄ src/guardrail/
PROJECT_SUMMARY.md:‚îú‚îÄ‚îÄ guardrails/                ‚úÖ Directory created
PROJECT_SUMMARY.md:5. **guardrail_versions** ‚úÖ
PROJECT_SUMMARY.md:   - [ ] Agent-specific guardrails (13 files)
PROJECT_SUMMARY.md:git clone https://github.com/guardrail-dev/guardrail.git
PROJECT_SUMMARY.md:cd guardrail
PROJECT_SUMMARY.md:source ~/.guardrail/venv/bin/activate
PROJECT_SUMMARY.md:guardrail --help
README.md:> An experimental system that learns from LLM failures and generates adaptive guardrails.
README.md:3. üß† **Learn** and generate dynamic guardrails
README.md:- ‚úÖ Dynamic guardrail generation from failures
README.md:- ‚úÖ Task classification (skip guardrails for creative work)
README.md:- ‚úÖ Pre-warm cache for instant guardrail loading (99.9% faster first request)
README.md:- üöß Semantic guardrail matching (embeddings not yet implemented)
README.md:# Initialize guardrail
README.md:# Expected: Should work with basic guardrails
README.md:# If it fails: Check logs at ~/.guardrail/logs/
README.md:Intelligently skips guardrails for non-code tasks:
README.md:# Code task - guardrails applied ‚úÖ
README.md:# Creative task - guardrails skipped ‚è≠Ô∏è
README.md:Instant guardrail loading eliminates cold-start latency:
README.md:pytest --cov=src/guardrail --cov-report=html
README.md:‚îú‚îÄ‚îÄ src/guardrail/
README.md:‚îî‚îÄ‚îÄ ~/.guardrail/       # User configuration & data
README.md:    ‚îú‚îÄ‚îÄ guardrails/     # Static + dynamic rules
ROADMAP.md:- [x] Dynamic guardrail generation
ROADMAP.md:- [x] Smart guardrail bypass for creative work
ROADMAP.md:  - Build guardrail index
ROADMAP.md:  - Real-time guardrail suggestions
ROADMAP.md:- [ ] Shared guardrail libraries
ROADMAP.md:- [ ] Industry-specific guardrail libraries
ROADMAP.md:- [ ] Automated guardrail tuning
ROADMAP.md:- [ ] LLM-powered guardrail generation from docs
ROADMAP.md:- [ ] Natural language guardrail definition
ROADMAP.md:- [ ] Automatic test generation from guardrails
ROADMAP.md:- [ ] Self-healing guardrails (adapt when broken)
ROADMAP.md:- [ ] Multi-modal guardrails (code + design + docs)
TESTING_GUIDE.md:guardrail init
TESTING_GUIDE.md:# ‚úÖ Created ~/.guardrail directory
TESTING_GUIDE.md:# ‚úÖ Created guardrails/ directory
TESTING_GUIDE.md:ls -la ~/.guardrail/
TESTING_GUIDE.md:# ~/.guardrail/
TESTING_GUIDE.md:#   ‚îú‚îÄ‚îÄ guardrails/
TESTING_GUIDE.md:#   ‚îÇ   ‚îî‚îÄ‚îÄ guardrail.db
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "create a simple hello world function" --mode standard
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "create a user login endpoint" --mode standard
TESTING_GUIDE.md:# 1. Request that violates security guardrails
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "create authentication without MFA" --mode strict
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "create user registration without tests" --mode strict
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "design and implement a complete user authentication system" --agent architect
TESTING_GUIDE.md:guardrail analyze --session-id <session_id_from_above>
TESTING_GUIDE.md:**Objective**: Validate existing code against guardrails.
TESTING_GUIDE.md:guardrail validate --file test_auth.py --agent secops
TESTING_GUIDE.md:**Objective**: Analyze entire project for guardrail violations.
TESTING_GUIDE.md:guardrail analyze --path ./src --agent architect
TESTING_GUIDE.md:time guardrail execute --tool claude --prompt "create a simple REST API endpoint" --mode standard
TESTING_GUIDE.md:time guardrail execute --tool claude --prompt "create a complete user management system with CRUD operations" --mode standard
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "create function A" --mode standard
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "create function B" --mode strict
TESTING_GUIDE.md:guardrail validate --file test.py --agent secops
TESTING_GUIDE.md:sqlite3 ~/.guardrail/data/guardrail.db
TESTING_GUIDE.md:tail -f ~/.guardrail/logs/guardrail.log
TESTING_GUIDE.md:**Objective**: Test custom guardrail configuration.
TESTING_GUIDE.md:nano ~/.guardrail/config.yaml
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "create user signup"
TESTING_GUIDE.md:# 4. Add custom guardrail
TESTING_GUIDE.md:cat > ~/.guardrail/guardrails/custom_rules.md << 'EOF'
TESTING_GUIDE.md:# 5. Test custom guardrail enforcement
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "create login with username/password" --mode strict
TESTING_GUIDE.md:- Custom guardrails loaded
TESTING_GUIDE.md:guardrail execute --tool invalid-tool --prompt "test"
TESTING_GUIDE.md:guardrail execute --tool claude --prompt ""
TESTING_GUIDE.md:sqlite3 ~/.guardrail/data/guardrail.db "BEGIN EXCLUSIVE; SELECT * FROM sessions;"
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "test"
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "create complex system"
TESTING_GUIDE.md:guardrail execute --tool claude \
TESTING_GUIDE.md:guardrail execute --tool claude \
TESTING_GUIDE.md:guardrail validate --file auth_system.py --agent secops
TESTING_GUIDE.md:guardrail execute --tool claude \
TESTING_GUIDE.md:guardrail analyze --path ./auth_system --agent architect
TESTING_GUIDE.md:- All guardrails enforced
TESTING_GUIDE.md:  time guardrail execute --tool claude --prompt "create hello world" --mode standard
TESTING_GUIDE.md:  time guardrail execute --tool claude --prompt "create complete REST API with auth" --mode strict
TESTING_GUIDE.md:time guardrail analyze --path ./large_codebase --agent architect
TESTING_GUIDE.md:guardrail execute --tool claude --help
TESTING_GUIDE.md:nano ~/.guardrail/config.yaml
TESTING_GUIDE.md:lsof ~/.guardrail/data/guardrail.db
TESTING_GUIDE.md:rm ~/.guardrail/data/guardrail.db
TESTING_GUIDE.md:guardrail init
TESTING_GUIDE.md:guardrail execute --tool claude --prompt "..." --mode standard
TESTING_GUIDE.md:nano ~/.guardrail/config.yaml
TESTING_GUIDE.md:### Issue 4: "Missing guardrails"
TESTING_GUIDE.md:# Check guardrail files
TESTING_GUIDE.md:ls -la ~/.guardrail/guardrails/
TESTING_GUIDE.md:guardrail init --force
TEST_GUIDE.md:guardrail --version
TEST_GUIDE.md:# Should output: guardrail, version 1.0.0
TEST_GUIDE.md:pytest --cov=src/guardrail --cov-report=html --cov-report=term-missing -v
TEST_GUIDE.md:guardrail --help
TEST_GUIDE.md:# Test init command (creates ~/.guardrail directory)
TEST_GUIDE.md:guardrail init
TEST_GUIDE.md:guardrail --version
TEST_GUIDE.md:ls -la ~/.guardrail/
TEST_GUIDE.md:cat ~/.guardrail/config.yaml
TEST_GUIDE.md:# ~/.guardrail/
TEST_GUIDE.md:#   ‚îú‚îÄ‚îÄ guardrails/
TEST_GUIDE.md:ls -la ~/.guardrail/data/
TEST_GUIDE.md:sqlite3 ~/.guardrail/data/guardrail.db ".tables"
TEST_GUIDE.md:from guardrail.core.daemon import GuardrailDaemon, AIRequest
TEST_GUIDE.md:from guardrail.utils.config import Config, DatabaseConfig
TEST_GUIDE.md:rm -rf dist/ build/ src/guardrail.egg-info/
TEST_GUIDE.md:# - guardrail-1.0.0.tar.gz (~54KB)
TEST_GUIDE.md:# - guardrail-1.0.0-py3-none-any.whl (~61KB)
TEST_GUIDE.md:pip install dist/guardrail-1.0.0-py3-none-any.whl
TEST_GUIDE.md:guardrail --version
TEST_GUIDE.md:guardrail --help
TEST_GUIDE.md:guardrail init
TEST_GUIDE.md:Test that guardrails provide suggestions without blocking:
TEST_GUIDE.md:# guardrail execute --tool claude --prompt "create a login endpoint" --mode standard
TEST_GUIDE.md:# guardrail execute --tool claude --prompt "create auth without MFA" --mode strict
TEST_GUIDE.md:# guardrail execute --tool claude --prompt "design and implement user authentication" --agent architect
TEST_GUIDE.md:from guardrail.core.daemon import GuardrailDaemon, AIRequest
TEST_GUIDE.md:from guardrail.utils.config import Config, DatabaseConfig
TEST_GUIDE.md:rm ~/.guardrail/data/guardrail.db
TEST_GUIDE.md:guardrail init
TEST_GUIDE.md:pytest --cov=src/guardrail --cov-report=html
TEST_GUIDE.md:pytest --cov=src/guardrail --cov-report=xml
TEST_RESULTS.md:- `src/guardrail/utils/config.py` uses `@validator` (deprecated)
config.example.yaml:# Copy this file to ~/.guardrail/config.yaml and customize for your environment
config.example.yaml:guardrails:
config.example.yaml:  base_path: "~/.guardrail/guardrails"
config.example.yaml:  agents_path: "~/.guardrail/guardrails/agents"
config.example.yaml:  path: "~/.guardrail/data/guardrail.db"
config.example.yaml:  file: "~/.guardrail/logs/guardrail.log"
config.example.yaml:  team_sync: false               # Phase 2: Team guardrail synchronization
config.example.yaml:  sync_repo: ""                   # Git repository URL for team guardrails
data/schema.sql:-- Violations table: Track guardrail violations
data/schema.sql:    guardrail_type TEXT NOT NULL CHECK(guardrail_type IN ('bpsbs', 'ai', 'ux_ui', 'agent')),
data/schema.sql:CREATE INDEX IF NOT EXISTS idx_violations_guardrail_type ON violations(guardrail_type);
data/schema.sql:-- Guardrail versions table: Track guardrail document changes
data/schema.sql:CREATE TABLE IF NOT EXISTS guardrail_versions (
data/schema.sql:-- Indexes for guardrail_versions table
data/schema.sql:CREATE INDEX IF NOT EXISTS idx_guardrail_versions_timestamp ON guardrail_versions(timestamp);
data/schema.sql:CREATE INDEX IF NOT EXISTS idx_guardrail_versions_file_path ON guardrail_versions(file_path);
data/schema.sql:CREATE INDEX IF NOT EXISTS idx_guardrail_versions_version ON guardrail_versions(version);
data/schema.sql:    guardrail_type,
data/schema.sql:GROUP BY DATE(timestamp), guardrail_type, rule_violated, severity
docs/launch-checklist.md:  - [ ] Register guardrail.dev domain
docs/launch-checklist.md:  - [ ] Deploy docs.guardrail.dev (GitBook, Read the Docs, or Docusaurus)
docs/launch-checklist.md:  - [ ] Create Twitter/X account (@guardraildev)
docs/launch-checklist.md:  - [ ] Setup support email (support@guardrail.dev)
docs/launch-checklist.md:  - [ ] Test installation: `pip install guardrail`
docs/launch-checklist.md:pip install dist/guardrail-1.0.0-py3-none-any.whl
docs/launch-checklist.md:guardrail --version  # Should output: guardrail, version 1.0.0
docs/launch-checklist.md:pytest --cov=src/guardrail --cov-report=term-missing
docs/launch-checklist.md:**Prepared by**: guardrail.dev team
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:Pre-warm cache loads frequently accessed guardrails during daemon initialization:
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:**File**: `src/guardrail/core/daemon.py`
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:    """Pre-warm cache with commonly used guardrails."""
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:        self.context_manager.load_guardrails(
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:- **Before**: First request loads guardrails from disk (~300ms)
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:guardrails_{agent}_{mode}_{task_type}
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:- `guardrails_None_standard_none` - Default/unknown
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:- `guardrails_None_standard_authentication` - Auth tasks
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:- `guardrails_None_standard_api` - API tasks
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:- `guardrails_None_standard_database` - Database tasks
docs/PERFORMANCE_OPTIMIZATION_PREWARM.md:most_used = analyze_guardrail_usage(last_7_days)
docs/PHASE_3_COMPLETION.md:**File**: `src/guardrail/core/daemon.py` (360 lines)
docs/PHASE_3_COMPLETION.md:   - Build context with guardrails injection
docs/PHASE_3_COMPLETION.md:   - Validate against guardrails
docs/PHASE_3_COMPLETION.md:   - ContextManager for guardrail injection
docs/PHASE_3_COMPLETION.md:**File**: `src/guardrail/core/workers.py` (450 lines)
docs/PHASE_3_COMPLETION.md:   - Saves to `~/.guardrail/AI_Failure_Modes.md`
docs/PHASE_3_COMPLETION.md:1. **`src/guardrail/utils/config.py`**:
docs/PHASE_3_COMPLETION.md:2. **`src/guardrail/utils/db.py`**:
docs/PHASE_3_COMPLETION.md:   - **Location**: `src/guardrail/utils/db.py:189`
docs/PHASE_3_COMPLETION.md:   - **Error**: `TypeError: unexpected keyword argument 'guardrails_path'`
docs/PHASE_3_COMPLETION.md:   - **Location**: `src/guardrail/core/daemon.py:65`
docs/PHASE_3_COMPLETION.md:   - **Location**: `src/guardrail/utils/config.py:76-79`
docs/PHASE_3_COMPLETION.md:   - **Location**: `src/guardrail/core/daemon.py:90,354`
docs/PHASE_3_COMPLETION.md:from guardrail.core.daemon import GuardrailDaemon, AIRequest
docs/PHASE_3_COMPLETION.md:from guardrail.core.workers import WorkerManager
docs/PHASE_3_COMPLETION.md:from guardrail.utils.config import Config
docs/PHASE1_TOKEN_OPTIMIZATION.md:**Objective**: Modularize guardrails into core + specialized files
docs/PHASE1_TOKEN_OPTIMIZATION.md:**Objective**: Intelligent guardrail selection based on task type and token budget
docs/PHASE1_TOKEN_OPTIMIZATION.md:- 15+ task types mapped to optimal guardrail combinations
docs/PHASE1_TOKEN_OPTIMIZATION.md:- Token budget enforcement (default: 5K for guardrails)
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - Task-specific guardrails added automatically
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - Creative mode detection ‚Üí minimal guardrails
docs/PHASE1_TOKEN_OPTIMIZATION.md:- Removed old `_select_relevant_guardrails()` and `_extract_key_points()` methods
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - Selects optimal guardrails within 5K token budget
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - `_select_relevant_guardrails()` ‚Üí replaced by smart_selector.select_guardrails()
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - `_extract_key_points()` ‚Üí no longer needed (guardrails pre-optimized)
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - Respects token budget (5K for guardrails)
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - Creative mode detection for minimal guardrails
docs/PHASE1_TOKEN_OPTIMIZATION.md:- Minimal guardrails for creative tasks (354 tokens)
docs/PHASE1_TOKEN_OPTIMIZATION.md:**Objective**: Add relevance scoring to limit dynamic guardrails to top 5 most relevant
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - Confidence: 0-2 points (guardrail confidence score)
docs/PHASE1_TOKEN_OPTIMIZATION.md:- Reduces learned guardrail tokens by 60-80%
docs/PHASE1_TOKEN_OPTIMIZATION.md:4. **Better Quality**: Focused, relevant guardrails = better validation
docs/PHASE1_TOKEN_OPTIMIZATION.md:- ‚úÖ `scripts/generate_core_guardrails.py`: Core guardrail generation
docs/PHASE1_TOKEN_OPTIMIZATION.md:- ‚úÖ `scripts/test_core_guardrails.py`: Token validation for guardrails
docs/PHASE1_TOKEN_OPTIMIZATION.md:- ‚úÖ `src/guardrail/core/smart_selector.py`: Smart guardrail selector
docs/PHASE1_TOKEN_OPTIMIZATION.md:- ‚úÖ `src/guardrail/core/context_manager.py`: Updated with smart selection
docs/PHASE1_TOKEN_OPTIMIZATION.md:- ‚úÖ `src/guardrail/core/adaptive_guardrails.py`: Added relevance scoring
docs/PHASE1_TOKEN_OPTIMIZATION.md:- ‚úÖ 3 core guardrail files
docs/PHASE1_TOKEN_OPTIMIZATION.md:- ‚úÖ 6 specialized guardrail modules
docs/PHASE1_TOKEN_OPTIMIZATION.md:| Core guardrails budget | 1,100 | 716 | ‚úÖ Pass |
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - Cache frequently used guardrails
docs/PHASE1_TOKEN_OPTIMIZATION.md:   - Parallel loading of guardrails
docs/PHASE1_TOKEN_OPTIMIZATION.md:5. **Track relevance scoring** accuracy for learned guardrails
docs/PHASE3_ADVANCED_FEATURES.md:**Objective**: Add semantic matching and dynamic budget management for intelligent guardrail selection
docs/PHASE3_ADVANCED_FEATURES.md:**Objective**: Use semantic similarity instead of keyword matching for better guardrail relevance
docs/PHASE3_ADVANCED_FEATURES.md:- Batch encoding and caching of guardrail embeddings
docs/PHASE3_ADVANCED_FEATURES.md:# 1. Index guardrails (pre-compute embeddings)
docs/PHASE3_ADVANCED_FEATURES.md:await matcher.index_guardrails(guardrails)
docs/PHASE3_ADVANCED_FEATURES.md:# 2. Find relevant guardrails
docs/PHASE3_ADVANCED_FEATURES.md:    guardrails=guardrails,
docs/PHASE3_ADVANCED_FEATURES.md:# [(guardrail, 0.87), (guardrail, 0.76), ...]
docs/PHASE3_ADVANCED_FEATURES.md:guardrails = adaptive_gen.get_active_guardrails(
docs/PHASE3_ADVANCED_FEATURES.md:for g in guardrails:
docs/PHASE3_ADVANCED_FEATURES.md:- Inference speed: ~50ms per guardrail
docs/PHASE3_ADVANCED_FEATURES.md:- Budget allocation across guardrail categories
docs/PHASE3_ADVANCED_FEATURES.md:- **Specialized** (20%): Task-specific guardrails
docs/PHASE3_ADVANCED_FEATURES.md:selected = selector.select_guardrails(
docs/PHASE3_ADVANCED_FEATURES.md:- **Category fairness**: Balanced allocation across guardrail types
docs/PHASE3_ADVANCED_FEATURES.md:- ‚úÖ `src/guardrail/core/semantic_matcher.py`: Semantic similarity matching (150 lines)
docs/PHASE3_ADVANCED_FEATURES.md:- ‚úÖ `src/guardrail/core/budget_manager.py`: Dynamic budget management (200 lines)
docs/PHASE3_ADVANCED_FEATURES.md:- ‚úÖ `src/guardrail/core/adaptive_guardrails.py`: Semantic integration (updated)
docs/PHASE3_ADVANCED_FEATURES.md:- ‚úÖ `src/guardrail/core/smart_selector.py`: Budget integration (updated)
docs/PHASE3_ADVANCED_FEATURES.md:texts = [g.rule_text for g in guardrails]
docs/PHASE3_ADVANCED_FEATURES.md:for guardrail, embedding in zip(guardrails, embeddings):
docs/PHASE3_ADVANCED_FEATURES.md:    self.guardrail_embeddings[guardrail.id] = embedding
docs/PHASE3_ADVANCED_FEATURES.md:    scores.append((guardrail, float(similarity)))
docs/PHASE3_ADVANCED_FEATURES.md:from guardrail.core.semantic_matcher import SemanticGuardrailMatcher
docs/PHASE3_ADVANCED_FEATURES.md:from guardrail.core.adaptive_guardrails import AdaptiveGuardrailGenerator
docs/PHASE3_ADVANCED_FEATURES.md:# Get guardrails with semantic matching
docs/PHASE3_ADVANCED_FEATURES.md:guardrails = adaptive_gen.get_active_guardrails(
docs/PHASE3_ADVANCED_FEATURES.md:for g in guardrails:
docs/PHASE3_ADVANCED_FEATURES.md:from guardrail.core.budget_manager import ContextBudgetManager
docs/PHASE3_ADVANCED_FEATURES.md:from guardrail.core.smart_selector import SmartGuardrailSelector
docs/PHASE3_ADVANCED_FEATURES.md:selector = SmartGuardrailSelector(guardrails_path)
docs/PHASE3_ADVANCED_FEATURES.md:selected_gpt35 = selector.select_guardrails(
docs/PHASE3_ADVANCED_FEATURES.md:selected_opus = selector.select_guardrails(
docs/PHASE3_ADVANCED_FEATURES.md:# Result: All relevant guardrails loaded
docs/PHASE3_ADVANCED_FEATURES.md:guardrails = adaptive_gen.get_active_guardrails(
docs/PHASE3_ADVANCED_FEATURES.md:# Allocate learned guardrails within budget
docs/PHASE3_ADVANCED_FEATURES.md:guardrails_within_budget = [
docs/PHASE3_ADVANCED_FEATURES.md:    g for g in guardrails
docs/PHASE3_ADVANCED_FEATURES.md:6. **Profile performance** with large guardrail sets
docs/PHASE3_ADVANCED_FEATURES.md:Phase 3 successfully delivered **semantic similarity matching** and **dynamic budget management** for intelligent guardrail selection. The implementation is:
docs/phase6-summary.md:- `test_guardrail_injection` - Guardrail markdown injection into prompts
docs/phase6-summary.md:- Key features highlight (automatic guardrail injection, real-time violation detection, AI failure analytics)
docs/phase6-summary.md:**Problem**: Integration tests reference `config.agents` instead of `config.guardrails`
docs/phase6-summary.md:   - Correct config.agents ‚Üí config.guardrails references
docs/PHASE2_SMART_ROUTING.md:**Objective**: Bypass guardrails for creative/content tasks to enable direct execution
docs/PHASE2_SMART_ROUTING.md:- Log task type and confidence when skipping guardrails
docs/PHASE2_SMART_ROUTING.md:- **Creative tasks** (score >= threshold) ‚Üí `requires_guardrails = False`
docs/PHASE2_SMART_ROUTING.md:- **Content tasks** (score >= 0.6) ‚Üí `requires_guardrails = False`
docs/PHASE2_SMART_ROUTING.md:- **Code tasks** ‚Üí `requires_guardrails = True`
docs/PHASE2_SMART_ROUTING.md:- **Mixed/Unknown** ‚Üí `requires_guardrails = True` (safe default)
docs/PHASE2_SMART_ROUTING.md:guardrails_required = task_classification.requires_guardrails
docs/PHASE2_SMART_ROUTING.md:if guardrails_required:
docs/PHASE2_SMART_ROUTING.md:    # Skip guardrails for creative/content tasks
docs/PHASE2_SMART_ROUTING.md:        "‚ú® Creative task detected - bypassing guardrails",
docs/PHASE2_SMART_ROUTING.md:      guardrails_required=False
docs/PHASE2_SMART_ROUTING.md:INFO: ‚ú® Creative task detected - bypassing guardrails for direct execution
docs/PHASE2_SMART_ROUTING.md:      guardrails_applied=False
docs/PHASE2_SMART_ROUTING.md:- **Clear logging** - Shows when and why guardrails are bypassed
docs/PHASE2_SMART_ROUTING.md:- **Safe defaults** - Ambiguous tasks still get guardrails
docs/PHASE2_SMART_ROUTING.md:7. **Creative Freedom**: Bypass guardrails for content/creative tasks
docs/PHASE2_SMART_ROUTING.md:- ‚úÖ `src/guardrail/agents/chain_optimizer.py`: Chain optimization logic (310 lines)
docs/PHASE2_SMART_ROUTING.md:- ‚úÖ `src/guardrail/agents/orchestrator.py`: Smart routing integration (updated orchestrate method)
docs/PHASE2_SMART_ROUTING.md:- ‚úÖ `src/guardrail/core/daemon.py`: Creative task skip logic (enhanced logging)
docs/PHASE_4_COMPLETION.md:- `src/guardrail/cli/commands.py` (550 lines) - Main CLI commands
docs/PHASE_4_COMPLETION.md:- `src/guardrail/main.py` - Alternative entry point
docs/PHASE_4_COMPLETION.md:- `src/guardrail/__main__.py` - Package entry point
docs/PHASE_4_COMPLETION.md:guardrail = "guardrail.__main__:cli"
docs/PHASE_4_COMPLETION.md:gr = "guardrail.__main__:cli"  # Short alias
docs/PHASE_4_COMPLETION.md:#### 1. **`guardrail run <tool> <prompt>`** ‚úÖ
docs/PHASE_4_COMPLETION.md:Execute AI tool with guardrails
docs/PHASE_4_COMPLETION.md:guardrail run claude "Create a login form" --agent coder --mode strict --verbose
docs/PHASE_4_COMPLETION.md:#### 2. **`guardrail init`** ‚úÖ
docs/PHASE_4_COMPLETION.md:Initialize guardrail configuration
docs/PHASE_4_COMPLETION.md:- Creates `~/.guardrail/` directory structure
docs/PHASE_4_COMPLETION.md:- Creates guardrails and logs directories
docs/PHASE_4_COMPLETION.md:#### 3. **`guardrail analyze`** ‚úÖ
docs/PHASE_4_COMPLETION.md:#### 4. **`guardrail status`** ‚úÖ
docs/PHASE_4_COMPLETION.md:Show guardrail system status
docs/PHASE_4_COMPLETION.md:#### 5. **`guardrail export`** ‚úÖ
docs/PHASE_4_COMPLETION.md:#### 6. **`guardrail daemon`** ‚úÖ
docs/PHASE_4_COMPLETION.md:Start guardrail daemon with background workers
docs/PHASE_4_COMPLETION.md:#### 7. **`guardrail config`** ‚úÖ
docs/PHASE_4_COMPLETION.md:#### 8. **`guardrail interactive`** ‚úÖ
docs/PHASE_4_COMPLETION.md:Interactive guardrail session (REPL mode)
docs/PHASE_4_COMPLETION.md:- `scripts/guardrail-wrapper.sh` - Shell wrapper for AI tools
docs/PHASE_4_COMPLETION.md:#### Shell Wrapper (`guardrail-wrapper.sh`)
docs/PHASE_4_COMPLETION.md:**Purpose**: Transparently wrap AI CLI tools with guardrails
docs/PHASE_4_COMPLETION.md:guardrail-wrapper <tool> <prompt>
docs/PHASE_4_COMPLETION.md:guardrail-wrapper claude "Design user authentication service"
docs/PHASE_4_COMPLETION.md:alias claude='guardrail-wrapper claude'
docs/PHASE_4_COMPLETION.md:alias gemini='guardrail-wrapper gemini'
docs/PHASE_4_COMPLETION.md:alias codex='guardrail-wrapper codex'
docs/PHASE_4_COMPLETION.md:alias gr='guardrail'
docs/PHASE_4_COMPLETION.md:guardrail init
docs/PHASE_4_COMPLETION.md:guardrail run claude "Create a user model"
docs/PHASE_4_COMPLETION.md:guardrail run gemini "Design API" --agent architect --mode strict -v
docs/PHASE_4_COMPLETION.md:guardrail status
docs/PHASE_4_COMPLETION.md:guardrail analyze --days 30 --tool claude
docs/PHASE_4_COMPLETION.md:guardrail export -o failures.md -l 200
docs/PHASE_4_COMPLETION.md:guardrail interactive
docs/PHASE_4_COMPLETION.md:guardrail daemon
docs/PHASE_4_COMPLETION.md:guardrail analyze --days 1 --tool claude
docs/PHASE_4_COMPLETION.md:guardrail export -o daily_report.md
docs/PHASE_4_COMPLETION.md:guardrail config | grep -A 5 "tools:"
docs/PHASE_4_COMPLETION.md:git clone https://github.com/guardrail-dev/guardrail.git
docs/PHASE_4_COMPLETION.md:cd guardrail
docs/PHASE_4_COMPLETION.md:source ~/.guardrail/venv/bin/activate
docs/PHASE_4_COMPLETION.md:guardrail --version
docs/PHASE_4_COMPLETION.md:guardrail status
docs/PHASE1_COMPLETE.md:guardrails/agents/
docs/PHASE1_COMPLETE.md:guardrails/agents/
docs/PHASE1_COMPLETE.md:   - Cache frequently used guardrails
docs/phase7-summary.md:- **Scripts**: Added guardrail-wrapper entry point
docs/phase7-summary.md:"""Setup configuration for guardrail.dev"""
docs/phase7-summary.md:recursive-include guardrails *.md
docs/phase7-summary.md:# - guardrail-1.0.0.tar.gz (54KB)
docs/phase7-summary.md:# - guardrail-1.0.0-py3-none-any.whl (61KB)
docs/phase7-summary.md:pip install dist/guardrail-1.0.0-py3-none-any.whl
docs/phase7-summary.md:guardrail --version
docs/phase7-summary.md:# Output: guardrail, version 1.0.0 ‚úÖ
docs/phase7-summary.md:- No *.md files in guardrails/ directory (expected, guardrails are in separate directory)
docs/phase7-summary.md:pip install guardrail
docs/phase7-summary.md:git clone https://github.com/guardrail-dev/guardrail.git
docs/phase7-summary.md:cd guardrail
docs/phase7-summary.md:pip install guardrail-1.0.0-py3-none-any.whl
docs/phase7-summary.md:- `guardrail` - Main CLI command
docs/phase7-summary.md:- `guardrail-wrapper` - Shell wrapper for AI tool integration
docs/phase7-summary.md:3. guardrail.dev - Landing page and docs
docs/phase7-summary.md:2. Missing *.md files in guardrails/ - Expected behavior, guardrails stored separately
docs/phase7-summary.md:   - Register guardrail.dev domain
docs/phase7-summary.md:   - Setup docs.guardrail.dev subdomain
docs/phase7-summary.md:   - Create social media accounts (@guardraildev)
docs/phase7-summary.md:- Entry Points: 2 (guardrail, guardrail-wrapper)
docs/PHASE4_TESTING_VALIDATION.md:- Old system: ~24K tokens (all guardrails)
docs/PHASE4_TESTING_VALIDATION.md:    async def test_creative_tasks_skip_guardrails(self)
docs/PHASE4_TESTING_VALIDATION.md:    async def test_code_tasks_require_guardrails(self)
docs/PHASE4_TESTING_VALIDATION.md:- Creative tasks correctly bypass guardrails ‚úÖ
docs/PHASE4_TESTING_VALIDATION.md:- Code tasks correctly apply guardrails ‚úÖ
docs/PHASE4_TESTING_VALIDATION.md:- Indexing: <5s for 100 guardrails ‚úÖ
docs/PHASE4_TESTING_VALIDATION.md:- Static guardrails setup
docs/PHASE4_TESTING_VALIDATION.md:- Dynamic guardrails lifecycle
docs/PHASE4_TESTING_VALIDATION.md:    from guardrail.core.context_manager import ContextManager
docs/PHASE4_TESTING_VALIDATION.md:pytest tests/performance/ --cov=src/guardrail --cov-report=html
docs/optimization.md:from guardrail.agents.chain_optimizer import AgentChainOptimizer
docs/optimization.md:**Problem**: v2.0 used keyword matching, missing semantically related guardrails.
docs/optimization.md:**Solution**: AI embeddings (sentence-transformers) match guardrails by meaning.
docs/optimization.md:from guardrail.core.semantic_matcher import SemanticGuardrailMatcher
docs/optimization.md:from guardrail.core.adaptive_guardrails import AdaptiveGuardrailGenerator
docs/optimization.md:guardrails = adaptive_gen.get_active_guardrails(
docs/optimization.md:for g in guardrails:
docs/optimization.md:- **Speed**: ~50ms per guardrail
docs/optimization.md:core_guardrails: 30%      # Universal rules (always applicable)
docs/optimization.md:specialized_rules: 20%    # Task-specific guardrails
docs/optimization.md:learned_patterns: 10%     # Dynamic guardrails from failures
docs/optimization.md:from guardrail.core.budget_manager import ContextBudgetManager
docs/optimization.md:from guardrail.core.smart_selector import SmartGuardrailSelector
docs/optimization.md:selector = SmartGuardrailSelector(guardrails_path)
docs/optimization.md:selected = selector.select_guardrails(
docs/optimization.md:all_guardrails = load_all_guardrails()  # 24K tokens
docs/optimization.md:context = build_context(prompt, all_guardrails)
docs/optimization.md:smart_guardrails = select_smart(prompt, complexity, model)  # <5K tokens
docs/optimization.md:context = build_context(prompt, smart_guardrails)
docs/optimization.md:# Benchmark results (100 guardrails, 10 searches)
docs/optimization.md:Add to `~/.guardrail/config.yaml`:
docs/optimization.md:  top_k: 5                        # Max guardrails to return
docs/optimization.md:    core: 0.30        # 30% to core guardrails
docs/optimization.md:$ guardrail run claude "fix typo in README"
docs/optimization.md:$ guardrail run claude "implement OAuth2 authentication" --mode strict
docs/optimization.md:$ guardrail run claude "write blog post about new features"
docs/optimization.md:   - Budget: 0 tokens (no guardrails needed)
docs/optimization.md:$ guardrail metrics --period 30d
docs/optimization.md:# ~/.guardrail/config.yaml
docs/optimization.md:guardrail run claude "fix typo in README"
docs/optimization.md:guardrail run claude "implement authentication" --mode strict
docs/optimization.md:guardrail metrics --period 7d
docs/optimization.md:guardrail analyze --focus optimization
docs/optimization.md:- Keep guardrails concise and focused
docs/optimization.md:- Regularly review and refine guardrails based on similarity scores
docs/phase5-agents.md:#### 1. Base Agent System (`src/guardrail/agents/base.py`)
docs/phase5-agents.md:#### 2. Orchestrator Agent (`src/guardrail/agents/orchestrator.py`)
docs/phase5-agents.md:pytest tests/test_agents/ --cov=src/guardrail/agents --cov-report=html
docs/phase5-agents.md:from guardrail.agents.orchestrator import OrchestratorAgent
docs/phase5-agents.md:from guardrail.agents.base import AgentContext
docs/phase5-agents.md:from guardrail.utils.config import Config
docs/phase5-agents.md:The agent system integrates with the guardrail daemon through:
docs/phase5-agents.md:guardrail validate --agent-mode standard --output results.json
docs/phase5-agents.md:guardrail validate --agent-mode strict --fail-on-block
docs/phase5-agents.md:Each agent loads instructions from `~/.guardrail/guardrails/agents/<agent-name>.md`:
docs/phase5-agents.md:- **Solution**: Create markdown file in ~/.guardrail/guardrails/agents/
docs/configuration.md:~/.guardrail/config.yaml
docs/configuration.md:The configuration file is created during `guardrail init` and contains all system settings.
docs/configuration.md:  path: "~/.guardrail/data/guardrail.db"
docs/configuration.md:  v2_adaptive_learning: true       # Pattern analysis & dynamic guardrails
docs/configuration.md:  v2_dynamic_guardrails: true      # Learned rules from DB
docs/configuration.md:  top_k: 5                        # Max guardrails to return
docs/configuration.md:    core: 0.30          # 30% to core guardrails
docs/configuration.md:guardrails:
docs/configuration.md:  base_path: "~/.guardrail/guardrails"
docs/configuration.md:  agents_path: "~/.guardrail/guardrails/agents"
docs/configuration.md:dynamic_guardrails:
docs/configuration.md:  enforce_validated: true         # Apply validated guardrails
docs/configuration.md:  enforce_trial: false            # Don't enforce trial guardrails
docs/configuration.md:  log_dir: "~/.guardrail/logs"
docs/configuration.md:  cache_guardrails: true
docs/configuration.md:    commit_message_template: "guardrail: {task_type} - {summary}"
docs/configuration.md:# ~/.guardrail/config.dev.yaml
docs/configuration.md:# ~/.guardrail/config.prod.yaml
docs/configuration.md:guardrail config --validate
docs/configuration.md:guardrail config --show
docs/configuration.md:guardrail config --show budget_manager
docs/configuration.md:guardrail config --export > config-backup.yaml
docs/configuration.md:cp ~/.guardrail/config.yaml ~/.guardrail/config.v2.0.yaml
docs/configuration.md:guardrail config --validate
docs/configuration.md:guardrail run claude "test optimization" --dry-run
docs/configuration.md:guardrail config --validate --verbose
docs/configuration.md:guardrail config --reset
docs/configuration.md:cp ~/.guardrail/config.v2.0.yaml ~/.guardrail/config.yaml
docs/configuration.md:3. **Regular Validation**: Run `guardrail config --validate` after changes
guardrails/README.md:5. Update guardrails after retrospectives and audits.
guardrails/AI_Guardrails.md:- Use SpecCTRL to enforce guardrails (`bpsbs.md`, `AI_Guardrails.md`).
guardrails/agents/orchestrator.md:10. **Standards Oracle** ‚Üí enforce guardrails.  
guardrails/agents/standards-oracle.md:- Enforce **all guardrails**:
guardrails/agents/standards-oracle.md:- No approval if **coverage <100%**, or guardrails skipped.  
guardrails/agents/standards-oracle.md:2. Compare against guardrail files:
guardrails/agents/standards-oracle.md:- **Report**: Pass/Fail per guardrail file.  
guardrails/agents/README.md:10. **Standards Oracle** ‚Üí enforce guardrails.  
guardrails/agents/secops-engineer.md:3. Validate compliance with guardrails.  
guardrails/agents/dba.md:2. Review against guardrails.  
guardrails/agents/merciless-evaluator.md:2. Run compliance check against guardrails.  
guardrails/agents/ux-ui-designer.md:- **Checklist** of UX guardrails met.  
guardrails/agents/ruthless-coder.md:4. Verify against guardrails.  
guardrails/agents/ruthless-coder.md:- **Note** of which guardrails were applied.  
htmlcov/z_8a7904fe3fff7cca_coder_py.html:    <title>Coverage for src/guardrail/agents/coder.py: 87%</title>
htmlcov/z_8a7904fe3fff7cca_coder_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/coder.py</b>:
htmlcov/z_8a7904fe3fff7cca_coder_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_coder_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_coder_py.html:    <p class="run"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"coder"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/ruthless-coder.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_dba_py.html:    <title>Coverage for src/guardrail/agents/dba.py: 100%</title>
htmlcov/z_8a7904fe3fff7cca_dba_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/dba.py</b>:
htmlcov/z_8a7904fe3fff7cca_dba_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_dba_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_dba_py.html:    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"dba"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/dba.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_workers_py.html:    <title>Coverage for src/guardrail/core/workers.py: 71%</title>
htmlcov/z_a3d981cf838451f9_workers_py.html:            <span class="text">Coverage for </span><b>src/guardrail/core/workers.py</b>:
htmlcov/z_a3d981cf838451f9_workers_py.html:    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">logger</span> <span class="key">import</span> <span class="nam">get_logger</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_workers_py.html:    <p class="run"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_workers_py.html:    <p class="run"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">db</span> <span class="key">import</span> <span class="nam">DatabaseManager</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_workers_py.html:    <p class="mis show_mis"><span class="n"><a id="t267" href="#t267">267</a></span><span class="t">                <span class="nam">output_path</span> <span class="op">=</span> <span class="nam">Path</span><span class="op">(</span><span class="str">"~/.guardrail/AI_Failure_Modes.md"</span><span class="op">)</span><span class="op">.</span><span class="nam">expanduser</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_workers_py.html:    <p class="run"><span class="n"><a id="t391" href="#t391">391</a></span><span class="t">        <span class="nam">log_dir</span> <span class="op">=</span> <span class="nam">Path</span><span class="op">(</span><span class="str">"~/.guardrail/logs"</span><span class="op">)</span><span class="op">.</span><span class="nam">expanduser</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_09ed0ebd9e054c99___init___py.html:    <title>Coverage for src/guardrail/__init__.py: 100%</title>
htmlcov/z_09ed0ebd9e054c99___init___py.html:            <span class="text">Coverage for </span><b>src/guardrail/__init__.py</b>:
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <title>Coverage for src/guardrail/agents/orchestrator.py: 83%</title>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/orchestrator.py</b>:
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run run2"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t">            <span class="str">"orchestrator"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/orchestrator.md"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">architect</span> <span class="key">import</span> <span class="nam">ArchitectAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">business_analyst</span> <span class="key">import</span> <span class="nam">BusinessAnalystAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">coder</span> <span class="key">import</span> <span class="nam">CoderAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">dba</span> <span class="key">import</span> <span class="nam">DBAAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">debug_hunter</span> <span class="key">import</span> <span class="nam">DebugHunterAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">documentation</span> <span class="key">import</span> <span class="nam">DocumentationAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">evaluator</span> <span class="key">import</span> <span class="nam">EvaluatorAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">secops</span> <span class="key">import</span> <span class="nam">SecOpsAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">sre</span> <span class="key">import</span> <span class="nam">SREAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">standards_oracle</span> <span class="key">import</span> <span class="nam">StandardsOracleAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">tester</span> <span class="key">import</span> <span class="nam">TesterAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_orchestrator_py.html:    <p class="run"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t">        <span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">ux_designer</span> <span class="key">import</span> <span class="nam">UXDesignerAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <title>Coverage for src/guardrail/utils/config.py: 72%</title>
htmlcov/z_0a9bde6dae2baa36_config_py.html:            <span class="text">Coverage for </span><b>src/guardrail/utils/config.py</b>:
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""Configuration management for guardrail.dev"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t">    <span class="nam">base_path</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"~/.guardrail/guardrails"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t">    <span class="nam">agents_path</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"~/.guardrail/guardrails/agents"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">    <span class="nam">path</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"~/.guardrail/data/guardrail.db"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t">    <span class="nam">file</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"~/.guardrail/logs/guardrail.log"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t106" href="#t106">106</a></span><span class="t">    <span class="nam">guardrails</span><span class="op">:</span> <span class="nam">GuardrailsConfig</span> <span class="op">=</span> <span class="nam">Field</span><span class="op">(</span><span class="nam">default_factory</span><span class="op">=</span><span class="nam">GuardrailsConfig</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t127" href="#t127">127</a></span><span class="t">    <span class="nam">guardrail_mode</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"standard"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t130" href="#t130">130</a></span><span class="t">    <span class="nam">guardrail_log_level</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"INFO"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t131" href="#t131">131</a></span><span class="t">    <span class="nam">guardrail_log_file</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"~/.guardrail/logs/guardrail.log"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t132" href="#t132">132</a></span><span class="t">    <span class="nam">guardrail_log_max_size_mb</span><span class="op">:</span> <span class="nam">int</span> <span class="op">=</span> <span class="num">100</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t133" href="#t133">133</a></span><span class="t">    <span class="nam">guardrail_log_backup_count</span><span class="op">:</span> <span class="nam">int</span> <span class="op">=</span> <span class="num">5</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t136" href="#t136">136</a></span><span class="t">    <span class="nam">guardrail_db_path</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"~/.guardrail/data/guardrail.db"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t137" href="#t137">137</a></span><span class="t">    <span class="nam">guardrail_db_backup_enabled</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t138" href="#t138">138</a></span><span class="t">    <span class="nam">guardrail_db_backup_interval_hours</span><span class="op">:</span> <span class="nam">int</span> <span class="op">=</span> <span class="num">24</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t141" href="#t141">141</a></span><span class="t">    <span class="nam">guardrail_claude_path</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"claude"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t142" href="#t142">142</a></span><span class="t">    <span class="nam">guardrail_gemini_path</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"gemini"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t143" href="#t143">143</a></span><span class="t">    <span class="nam">guardrail_codex_path</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"codex"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t146" href="#t146">146</a></span><span class="t">    <span class="nam">guardrail_base_path</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"~/.guardrail/guardrails"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t147" href="#t147">147</a></span><span class="t">    <span class="nam">guardrail_agents_path</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"~/.guardrail/guardrails/agents"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t150" href="#t150">150</a></span><span class="t">    <span class="nam">guardrail_background_analysis</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t151" href="#t151">151</a></span><span class="t">    <span class="nam">guardrail_failure_prediction</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t152" href="#t152">152</a></span><span class="t">    <span class="nam">guardrail_prompt_optimization</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t153" href="#t153">153</a></span><span class="t">    <span class="nam">guardrail_team_sync</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t156" href="#t156">156</a></span><span class="t">    <span class="nam">guardrail_team_enabled</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t157" href="#t157">157</a></span><span class="t">    <span class="nam">guardrail_team_sync_repo</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t158" href="#t158">158</a></span><span class="t">    <span class="nam">guardrail_team_sync_interval_hours</span><span class="op">:</span> <span class="nam">int</span> <span class="op">=</span> <span class="num">1</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t159" href="#t159">159</a></span><span class="t">    <span class="nam">guardrail_team_branch</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"main"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t162" href="#t162">162</a></span><span class="t">    <span class="nam">guardrail_timeout_seconds</span><span class="op">:</span> <span class="nam">int</span> <span class="op">=</span> <span class="num">30</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t163" href="#t163">163</a></span><span class="t">    <span class="nam">guardrail_max_retries</span><span class="op">:</span> <span class="nam">int</span> <span class="op">=</span> <span class="num">3</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t164" href="#t164">164</a></span><span class="t">    <span class="nam">guardrail_cache_size_mb</span><span class="op">:</span> <span class="nam">int</span> <span class="op">=</span> <span class="num">100</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t167" href="#t167">167</a></span><span class="t">    <span class="nam">guardrail_debug</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t168" href="#t168">168</a></span><span class="t">    <span class="nam">guardrail_verbose</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run"><span class="n"><a id="t169" href="#t169">169</a></span><span class="t">    <span class="nam">guardrail_dry_run</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="pln"><span class="n"><a id="t178" href="#t178">178</a></span><span class="t">    <span class="str">"""Configuration manager for guardrail.dev"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="run run2"><span class="n"><a id="t184" href="#t184">184</a></span><span class="t">            <span class="key">else</span> <span class="nam">Path</span><span class="op">.</span><span class="nam">home</span><span class="op">(</span><span class="op">)</span> <span class="op">/</span> <span class="str">".guardrail"</span> <span class="op">/</span> <span class="str">"config.yaml"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t207" href="#t207">207</a></span><span class="t">            <span class="nam">mode</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_mode</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t211" href="#t211">211</a></span><span class="t">                    <span class="nam">cli_path</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_claude_path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t213" href="#t213">213</a></span><span class="t">                    <span class="nam">timeout</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_timeout_seconds</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t216" href="#t216">216</a></span><span class="t">                    <span class="nam">cli_path</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_gemini_path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t218" href="#t218">218</a></span><span class="t">                    <span class="nam">timeout</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_timeout_seconds</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t221" href="#t221">221</a></span><span class="t">                    <span class="nam">cli_path</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_codex_path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t223" href="#t223">223</a></span><span class="t">                    <span class="nam">timeout</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_timeout_seconds</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t226" href="#t226">226</a></span><span class="t">            <span class="nam">guardrails</span><span class="op">=</span><span class="nam">GuardrailsConfig</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t227" href="#t227">227</a></span><span class="t">                <span class="nam">base_path</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_base_path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t228" href="#t228">228</a></span><span class="t">                <span class="nam">agents_path</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_agents_path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t231" href="#t231">231</a></span><span class="t">                <span class="nam">path</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_db_path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t232" href="#t232">232</a></span><span class="t">                <span class="nam">backup_enabled</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_db_backup_enabled</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t233" href="#t233">233</a></span><span class="t">                <span class="nam">backup_interval_hours</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_db_backup_interval_hours</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t236" href="#t236">236</a></span><span class="t">                <span class="nam">level</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_log_level</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t237" href="#t237">237</a></span><span class="t">                <span class="nam">file</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_log_file</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t238" href="#t238">238</a></span><span class="t">                <span class="nam">max_size_mb</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_log_max_size_mb</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t239" href="#t239">239</a></span><span class="t">                <span class="nam">backup_count</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_log_backup_count</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t242" href="#t242">242</a></span><span class="t">                <span class="nam">background_analysis</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_background_analysis</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t243" href="#t243">243</a></span><span class="t">                <span class="nam">failure_prediction</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_failure_prediction</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t244" href="#t244">244</a></span><span class="t">                <span class="nam">prompt_optimization</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_prompt_optimization</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t245" href="#t245">245</a></span><span class="t">                <span class="nam">team_sync</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_team_sync</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t248" href="#t248">248</a></span><span class="t">                <span class="nam">enabled</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_team_enabled</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t249" href="#t249">249</a></span><span class="t">                <span class="nam">sync_repo</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_team_sync_repo</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t250" href="#t250">250</a></span><span class="t">                <span class="nam">sync_interval_hours</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_team_sync_interval_hours</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t251" href="#t251">251</a></span><span class="t">                <span class="nam">branch</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_team_branch</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis show_mis"><span class="n"><a id="t262" href="#t262">262</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">mode</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_mode</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis show_mis"><span class="n"><a id="t266" href="#t266">266</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">tools</span><span class="op">[</span><span class="str">"claude"</span><span class="op">]</span><span class="op">.</span><span class="nam">cli_path</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_claude_path</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis show_mis"><span class="n"><a id="t268" href="#t268">268</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">tools</span><span class="op">[</span><span class="str">"gemini"</span><span class="op">]</span><span class="op">.</span><span class="nam">cli_path</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_gemini_path</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis show_mis"><span class="n"><a id="t270" href="#t270">270</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">tools</span><span class="op">[</span><span class="str">"codex"</span><span class="op">]</span><span class="op">.</span><span class="nam">cli_path</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_codex_path</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis show_mis"><span class="n"><a id="t274" href="#t274">274</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">logging</span><span class="op">.</span><span class="nam">level</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_log_level</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t279" href="#t279">279</a></span><span class="t">                <span class="nam">self</span><span class="op">.</span><span class="nam">settings</span><span class="op">.</span><span class="nam">guardrail_background_analysis</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="pln"><span class="n"><a id="t334" href="#t334">334</a></span><span class="t">        <span class="com"># Create guardrails directory</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis show_mis"><span class="n"><a id="t335" href="#t335">335</a></span><span class="t">        <span class="nam">Path</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">guardrails</span><span class="op">.</span><span class="nam">base_path</span><span class="op">)</span><span class="op">.</span><span class="nam">mkdir</span><span class="op">(</span><span class="nam">parents</span><span class="op">=</span><span class="key">True</span><span class="op">,</span> <span class="nam">exist_ok</span><span class="op">=</span><span class="key">True</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_config_py.html:    <p class="mis show_mis"><span class="n"><a id="t336" href="#t336">336</a></span><span class="t">        <span class="nam">Path</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">guardrails</span><span class="op">.</span><span class="nam">agents_path</span><span class="op">)</span><span class="op">.</span><span class="nam">mkdir</span><span class="op">(</span><span class="nam">parents</span><span class="op">=</span><span class="key">True</span><span class="op">,</span> <span class="nam">exist_ok</span><span class="op">=</span><span class="key">True</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_09ed0ebd9e054c99___main___py.html:    <title>Coverage for src/guardrail/__main__.py: 0%</title>
htmlcov/z_09ed0ebd9e054c99___main___py.html:            <span class="text">Coverage for </span><b>src/guardrail/__main__.py</b>:
htmlcov/z_09ed0ebd9e054c99___main___py.html:    <p class="mis show_mis"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">cli</span><span class="op">.</span><span class="nam">commands</span> <span class="key">import</span> <span class="nam">cli</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_documentation_py.html:    <title>Coverage for src/guardrail/agents/documentation.py: 34%</title>
htmlcov/z_8a7904fe3fff7cca_documentation_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/documentation.py</b>:
htmlcov/z_8a7904fe3fff7cca_documentation_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_documentation_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_documentation_py.html:    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"documentation"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/documentation.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_19268f81456598d2_claude_py.html:    <title>Coverage for src/guardrail/adapters/claude.py: 58%</title>
htmlcov/z_19268f81456598d2_claude_py.html:            <span class="text">Coverage for </span><b>src/guardrail/adapters/claude.py</b>:
htmlcov/z_19268f81456598d2_base_py.html:    <title>Coverage for src/guardrail/adapters/base.py: 72%</title>
htmlcov/z_19268f81456598d2_base_py.html:            <span class="text">Coverage for </span><b>src/guardrail/adapters/base.py</b>:
htmlcov/z_09ed0ebd9e054c99_main_py.html:    <title>Coverage for src/guardrail/main.py: 0%</title>
htmlcov/z_09ed0ebd9e054c99_main_py.html:            <span class="text">Coverage for </span><b>src/guardrail/main.py</b>:
htmlcov/z_09ed0ebd9e054c99_main_py.html:    <p class="mis show_mis"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">cli</span><span class="op">.</span><span class="nam">commands</span> <span class="key">import</span> <span class="nam">cli</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_secops_py.html:    <title>Coverage for src/guardrail/agents/secops.py: 100%</title>
htmlcov/z_8a7904fe3fff7cca_secops_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/secops.py</b>:
htmlcov/z_8a7904fe3fff7cca_secops_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_secops_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_secops_py.html:    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"secops"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/secops.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/status.json:{"note":"This file is an internal implementation detail to speed up HTML report generation. Its format can change at any time. You might be looking for the JSON report: https://coverage.rtfd.io/cmd.html#cmd-json","format":5,"version":"7.10.7","globals":"6883c03c7ed2c3478960d7014d3af136","files":{"z_09ed0ebd9e054c99___init___py":{"hash":"e6baa73cda2916dad605215f937a92e1","index":{"url":"z_09ed0ebd9e054c99___init___py.html","file":"src/guardrail/__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":0,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_09ed0ebd9e054c99___main___py":{"hash":"50d3a72e0be375651ec29647e9cf76a8","index":{"url":"z_09ed0ebd9e054c99___main___py.html","file":"src/guardrail/__main__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":3,"n_excluded":0,"n_missing":3,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_19268f81456598d2___init___py":{"hash":"01e9a905459317b9d237a5f44706c27a","index":{"url":"z_19268f81456598d2___init___py.html","file":"src/guardrail/adapters/__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":41,"n_excluded":0,"n_missing":3,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_19268f81456598d2_base_py":{"hash":"3825f0313bde45e7bd7329d64b661d41","index":{"url":"z_19268f81456598d2_base_py.html","file":"src/guardrail/adapters/base.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":83,"n_excluded":0,"n_missing":23,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_19268f81456598d2_claude_py":{"hash":"0ce6b5321cb31521b69ebd505b801aa3","index":{"url":"z_19268f81456598d2_claude_py.html","file":"src/guardrail/adapters/claude.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":36,"n_excluded":0,"n_missing":15,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_19268f81456598d2_codex_py":{"hash":"9900800bae801c6131e1eeb6d53188ef","index":{"url":"z_19268f81456598d2_codex_py.html","file":"src/guardrail/adapters/codex.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":36,"n_excluded":0,"n_missing":22,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_19268f81456598d2_gemini_py":{"hash":"9038d06eea1287ddd32369024d7a5a3c","index":{"url":"z_19268f81456598d2_gemini_py.html","file":"src/guardrail/adapters/gemini.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":36,"n_excluded":0,"n_missing":22,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca___init___py":{"hash":"e6baa73cda2916dad605215f937a92e1","index":{"url":"z_8a7904fe3fff7cca___init___py.html","file":"src/guardrail/agents/__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":0,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_architect_py":{"hash":"02b4af10345c0c6e9cf4328579f0217f","index":{"url":"z_8a7904fe3fff7cca_architect_py.html","file":"src/guardrail/agents/architect.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":68,"n_excluded":0,"n_missing":3,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_base_py":{"hash":"d21b5107c0d757979b38928caff3ccef","index":{"url":"z_8a7904fe3fff7cca_base_py.html","file":"src/guardrail/agents/base.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":55,"n_excluded":0,"n_missing":10,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_business_analyst_py":{"hash":"8adc9fee64150a4ea92247d33bb45f12","index":{"url":"z_8a7904fe3fff7cca_business_analyst_py.html","file":"src/guardrail/agents/business_analyst.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":29,"n_excluded":0,"n_missing":19,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_coder_py":{"hash":"84858f469ddd9b9067417aa6c80dd055","index":{"url":"z_8a7904fe3fff7cca_coder_py.html","file":"src/guardrail/agents/coder.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":82,"n_excluded":0,"n_missing":11,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_dba_py":{"hash":"c8672a046e5170ae4035899b0268bd09","index":{"url":"z_8a7904fe3fff7cca_dba_py.html","file":"src/guardrail/agents/dba.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":34,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_debug_hunter_py":{"hash":"de774e6f2579f14ba1824dac9b281575","index":{"url":"z_8a7904fe3fff7cca_debug_hunter_py.html","file":"src/guardrail/agents/debug_hunter.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":34,"n_excluded":0,"n_missing":24,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_documentation_py":{"hash":"a179d73f6d216fdf54e079f48a3a0cc7","index":{"url":"z_8a7904fe3fff7cca_documentation_py.html","file":"src/guardrail/agents/documentation.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":29,"n_excluded":0,"n_missing":19,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_evaluator_py":{"hash":"1f8ec774ca5856e635438eddf43da8d7","index":{"url":"z_8a7904fe3fff7cca_evaluator_py.html","file":"src/guardrail/agents/evaluator.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":30,"n_excluded":0,"n_missing":5,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_orchestrator_py":{"hash":"f62601853714fb582764e7ecc1d067f2","index":{"url":"z_8a7904fe3fff7cca_orchestrator_py.html","file":"src/guardrail/agents/orchestrator.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":63,"n_excluded":0,"n_missing":11,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_secops_py":{"hash":"dc99edc60c7fc73eacc2e2d861720dd5","index":{"url":"z_8a7904fe3fff7cca_secops_py.html","file":"src/guardrail/agents/secops.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":36,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_sre_py":{"hash":"ee8f4e86e40445c295145919884ea5e9","index":{"url":"z_8a7904fe3fff7cca_sre_py.html","file":"src/guardrail/agents/sre.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":29,"n_excluded":0,"n_missing":19,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_standards_oracle_py":{"hash":"5e7bfedc2000d679c8a632b976a13144","index":{"url":"z_8a7904fe3fff7cca_standards_oracle_py.html","file":"src/guardrail/agents/standards_oracle.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":37,"n_excluded":0,"n_missing":27,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_tester_py":{"hash":"44844c7949fab9932fa54ef47812007b","index":{"url":"z_8a7904fe3fff7cca_tester_py.html","file":"src/guardrail/agents/tester.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":73,"n_excluded":0,"n_missing":2,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_8a7904fe3fff7cca_ux_designer_py":{"hash":"b0cb6df73bf9a3dc4a8356ebae446ab7","index":{"url":"z_8a7904fe3fff7cca_ux_designer_py.html","file":"src/guardrail/agents/ux_designer.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":34,"n_excluded":0,"n_missing":23,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_9b966fc63b64f091___init___py":{"hash":"e6baa73cda2916dad605215f937a92e1","index":{"url":"z_9b966fc63b64f091___init___py.html","file":"src/guardrail/cli/__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":0,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_9b966fc63b64f091_commands_py":{"hash":"9d9004f5bff6927dcd6b4cf8fe922c77","index":{"url":"z_9b966fc63b64f091_commands_py.html","file":"src/guardrail/cli/commands.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":246,"n_excluded":0,"n_missing":100,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_a3d981cf838451f9___init___py":{"hash":"e6baa73cda2916dad605215f937a92e1","index":{"url":"z_a3d981cf838451f9___init___py.html","file":"src/guardrail/core/__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":0,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_a3d981cf838451f9_context_manager_py":{"hash":"41069318dfb21a45775db1f4dd552542","index":{"url":"z_a3d981cf838451f9_context_manager_py.html","file":"src/guardrail/core/context_manager.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":115,"n_excluded":0,"n_missing":19,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_a3d981cf838451f9_daemon_py":{"hash":"19cc1c181d8d4a5b2f6f2eacb7ac2207","index":{"url":"z_a3d981cf838451f9_daemon_py.html","file":"src/guardrail/core/daemon.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":101,"n_excluded":0,"n_missing":4,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_a3d981cf838451f9_failure_detector_py":{"hash":"13b8b968a8abc4d330e47fdda7dbaa16","index":{"url":"z_a3d981cf838451f9_failure_detector_py.html","file":"src/guardrail/core/failure_detector.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":91,"n_excluded":0,"n_missing":3,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_a3d981cf838451f9_logger_py":{"hash":"fb7d16a7ccc71885bb499f8c9769934f","index":{"url":"z_a3d981cf838451f9_logger_py.html","file":"src/guardrail/core/logger.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":35,"n_excluded":0,"n_missing":25,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_a3d981cf838451f9_parser_py":{"hash":"829911aa0abe1793acfc6cd5ab1384f5","index":{"url":"z_a3d981cf838451f9_parser_py.html","file":"src/guardrail/core/parser.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":122,"n_excluded":0,"n_missing":8,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_a3d981cf838451f9_validator_py":{"hash":"9ae4188f5d1e88cbd284d4a3bea1a160","index":{"url":"z_a3d981cf838451f9_validator_py.html","file":"src/guardrail/core/validator.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":133,"n_excluded":0,"n_missing":1,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_a3d981cf838451f9_workers_py":{"hash":"4360e760669960705164b31368298e30","index":{"url":"z_a3d981cf838451f9_workers_py.html","file":"src/guardrail/core/workers.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":161,"n_excluded":0,"n_missing":47,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_09ed0ebd9e054c99_main_py":{"hash":"50d3a72e0be375651ec29647e9cf76a8","index":{"url":"z_09ed0ebd9e054c99_main_py.html","file":"src/guardrail/main.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":3,"n_excluded":0,"n_missing":3,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_0a9bde6dae2baa36___init___py":{"hash":"e6baa73cda2916dad605215f937a92e1","index":{"url":"z_0a9bde6dae2baa36___init___py.html","file":"src/guardrail/utils/__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":0,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_0a9bde6dae2baa36_config_py":{"hash":"b820d0b45213d91cb7e62377bd1b9259","index":{"url":"z_0a9bde6dae2baa36_config_py.html","file":"src/guardrail/utils/config.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":184,"n_excluded":0,"n_missing":51,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_0a9bde6dae2baa36_db_py":{"hash":"60bd883ccd02a5062062f82eff812c15","index":{"url":"z_0a9bde6dae2baa36_db_py.html","file":"src/guardrail/utils/db.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":153,"n_excluded":0,"n_missing":33,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}}}}
htmlcov/z_0a9bde6dae2baa36___init___py.html:    <title>Coverage for src/guardrail/utils/__init__.py: 100%</title>
htmlcov/z_0a9bde6dae2baa36___init___py.html:            <span class="text">Coverage for </span><b>src/guardrail/utils/__init__.py</b>:
htmlcov/z_8a7904fe3fff7cca_architect_py.html:    <title>Coverage for src/guardrail/agents/architect.py: 96%</title>
htmlcov/z_8a7904fe3fff7cca_architect_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/architect.py</b>:
htmlcov/z_8a7904fe3fff7cca_architect_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_architect_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_architect_py.html:    <p class="run run2"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t">            <span class="str">"architect"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/cold-blooded-architect.md"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091___init___py.html:    <title>Coverage for src/guardrail/cli/__init__.py: 100%</title>
htmlcov/z_9b966fc63b64f091___init___py.html:            <span class="text">Coverage for </span><b>src/guardrail/cli/__init__.py</b>:
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <title>Coverage for src/guardrail/core/daemon.py: 96%</title>
htmlcov/z_a3d981cf838451f9_daemon_py.html:            <span class="text">Coverage for </span><b>src/guardrail/core/daemon.py</b>:
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="run"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">adapters</span> <span class="key">import</span> <span class="nam">AdapterFactory</span><span class="op">,</span> <span class="nam">AIResponse</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="run"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">context_manager</span> <span class="key">import</span> <span class="nam">ContextManager</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="run"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">failure_detector</span> <span class="key">import</span> <span class="nam">FailureDetector</span><span class="op">,</span> <span class="nam">DetectedFailure</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="run"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">logger</span> <span class="key">import</span> <span class="nam">get_logger</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="run"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">parser</span> <span class="key">import</span> <span class="nam">ParsedResponse</span><span class="op">,</span> <span class="nam">ResponseParser</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="run"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">validator</span> <span class="key">import</span> <span class="nam">GuardrailValidator</span><span class="op">,</span> <span class="nam">Violation</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="run"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="run"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">db</span> <span class="key">import</span> <span class="nam">DatabaseManager</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="pln"><span class="n"><a id="t122" href="#t122">122</a></span><span class="t">            <span class="com"># 1. Load and inject guardrails</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="pln"><span class="n"><a id="t166" href="#t166">166</a></span><span class="t">            <span class="com"># 4. Validate against guardrails</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="pln"><span class="n"><a id="t245" href="#t245">245</a></span><span class="t"><span class="str">            violations: List of guardrail violations</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_daemon_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t327" href="#t327">327</a></span><span class="t">                    <span class="nam">type</span><span class="op">=</span><span class="nam">violation</span><span class="op">.</span><span class="nam">guardrail_type</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/class_index.html:                <td class="name left"><a href="z_09ed0ebd9e054c99___init___py.html">src/guardrail/__init__.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_09ed0ebd9e054c99___main___py.html">src/guardrail/__main__.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2___init___py.html#t24">src/guardrail/adapters/__init__.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2___init___py.html">src/guardrail/adapters/__init__.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t16">src/guardrail/adapters/base.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t27">src/guardrail/adapters/base.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html">src/guardrail/adapters/base.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2_claude_py.html#t13">src/guardrail/adapters/claude.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2_claude_py.html">src/guardrail/adapters/claude.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2_codex_py.html#t13">src/guardrail/adapters/codex.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2_codex_py.html">src/guardrail/adapters/codex.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2_gemini_py.html#t13">src/guardrail/adapters/gemini.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_19268f81456598d2_gemini_py.html">src/guardrail/adapters/gemini.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca___init___py.html">src/guardrail/agents/__init__.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html#t7">src/guardrail/agents/architect.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html">src/guardrail/agents/architect.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t14">src/guardrail/agents/base.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t27">src/guardrail/agents/base.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t38">src/guardrail/agents/base.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html">src/guardrail/agents/base.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_business_analyst_py.html#t7">src/guardrail/agents/business_analyst.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_business_analyst_py.html">src/guardrail/agents/business_analyst.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html#t7">src/guardrail/agents/coder.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html">src/guardrail/agents/coder.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html#t7">src/guardrail/agents/dba.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html">src/guardrail/agents/dba.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_debug_hunter_py.html#t7">src/guardrail/agents/debug_hunter.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_debug_hunter_py.html">src/guardrail/agents/debug_hunter.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_documentation_py.html#t7">src/guardrail/agents/documentation.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_documentation_py.html">src/guardrail/agents/documentation.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_evaluator_py.html#t7">src/guardrail/agents/evaluator.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_evaluator_py.html">src/guardrail/agents/evaluator.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html#t9">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html#t7">src/guardrail/agents/secops.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html">src/guardrail/agents/secops.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_sre_py.html#t7">src/guardrail/agents/sre.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_sre_py.html">src/guardrail/agents/sre.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_standards_oracle_py.html#t7">src/guardrail/agents/standards_oracle.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_standards_oracle_py.html">src/guardrail/agents/standards_oracle.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html#t7">src/guardrail/agents/tester.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html">src/guardrail/agents/tester.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html#t7">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_9b966fc63b64f091___init___py.html">src/guardrail/cli/__init__.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html">src/guardrail/cli/commands.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9___init___py.html">src/guardrail/core/__init__.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t15">src/guardrail/core/context_manager.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t48">src/guardrail/core/context_manager.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html">src/guardrail/core/context_manager.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t25">src/guardrail/core/daemon.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t32">src/guardrail/core/daemon.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t43">src/guardrail/core/daemon.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t55">src/guardrail/core/daemon.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html">src/guardrail/core/daemon.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t14">src/guardrail/core/failure_detector.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t26">src/guardrail/core/failure_detector.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html">src/guardrail/core/failure_detector.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_logger_py.html">src/guardrail/core/logger.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t13">src/guardrail/core/parser.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t24">src/guardrail/core/parser.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t35">src/guardrail/core/parser.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html">src/guardrail/core/parser.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t15">src/guardrail/core/validator.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t24">src/guardrail/core/validator.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t34">src/guardrail/core/validator.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t46">src/guardrail/core/validator.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html">src/guardrail/core/validator.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t18">src/guardrail/core/workers.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t50">src/guardrail/core/workers.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t154">src/guardrail/core/workers.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t251">src/guardrail/core/workers.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t341">src/guardrail/core/workers.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t397">src/guardrail/core/workers.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html">src/guardrail/core/workers.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_09ed0ebd9e054c99_main_py.html">src/guardrail/main.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36___init___py.html">src/guardrail/utils/__init__.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t12">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t20">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t34">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t46">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t67">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t82">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t91">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t119">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t123">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t171">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t177">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html">src/guardrail/utils/config.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t29">src/guardrail/utils/db.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t50">src/guardrail/utils/db.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t83">src/guardrail/utils/db.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t113">src/guardrail/utils/db.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t143">src/guardrail/utils/db.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t161">src/guardrail/utils/db.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t176">src/guardrail/utils/db.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t196">src/guardrail/utils/db.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t220">src/guardrail/utils/db.py</a></td>
htmlcov/class_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html">src/guardrail/utils/db.py</a></td>
htmlcov/z_a3d981cf838451f9___init___py.html:    <title>Coverage for src/guardrail/core/__init__.py: 100%</title>
htmlcov/z_a3d981cf838451f9___init___py.html:            <span class="text">Coverage for </span><b>src/guardrail/core/__init__.py</b>:
htmlcov/z_8a7904fe3fff7cca_evaluator_py.html:    <title>Coverage for src/guardrail/agents/evaluator.py: 83%</title>
htmlcov/z_8a7904fe3fff7cca_evaluator_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/evaluator.py</b>:
htmlcov/z_8a7904fe3fff7cca_evaluator_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_evaluator_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_evaluator_py.html:    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"evaluator"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/evaluator.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/function_index.html:                <td class="name left"><a href="z_09ed0ebd9e054c99___init___py.html">src/guardrail/__init__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_09ed0ebd9e054c99___main___py.html">src/guardrail/__main__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2___init___py.html#t34">src/guardrail/adapters/__init__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2___init___py.html#t69">src/guardrail/adapters/__init__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2___init___py.html#t78">src/guardrail/adapters/__init__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2___init___py.html">src/guardrail/adapters/__init__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t30">src/guardrail/adapters/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t47">src/guardrail/adapters/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t60">src/guardrail/adapters/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t69">src/guardrail/adapters/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t77">src/guardrail/adapters/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t85">src/guardrail/adapters/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t163">src/guardrail/adapters/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html#t214">src/guardrail/adapters/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html">src/guardrail/adapters/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_claude_py.html#t16">src/guardrail/adapters/claude.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_claude_py.html#t20">src/guardrail/adapters/claude.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_claude_py.html#t38">src/guardrail/adapters/claude.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_claude_py.html#t58">src/guardrail/adapters/claude.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_claude_py.html">src/guardrail/adapters/claude.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_codex_py.html#t16">src/guardrail/adapters/codex.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_codex_py.html#t20">src/guardrail/adapters/codex.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_codex_py.html#t38">src/guardrail/adapters/codex.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_codex_py.html#t58">src/guardrail/adapters/codex.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_codex_py.html">src/guardrail/adapters/codex.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_gemini_py.html#t16">src/guardrail/adapters/gemini.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_gemini_py.html#t20">src/guardrail/adapters/gemini.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_gemini_py.html#t38">src/guardrail/adapters/gemini.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_gemini_py.html#t58">src/guardrail/adapters/gemini.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_19268f81456598d2_gemini_py.html">src/guardrail/adapters/gemini.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca___init___py.html">src/guardrail/agents/__init__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html#t10">src/guardrail/agents/architect.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html#t21">src/guardrail/agents/architect.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html#t95">src/guardrail/agents/architect.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html#t135">src/guardrail/agents/architect.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html#t174">src/guardrail/agents/architect.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html#t214">src/guardrail/agents/architect.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html#t242">src/guardrail/agents/architect.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html">src/guardrail/agents/architect.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t41">src/guardrail/agents/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t52">src/guardrail/agents/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t63">src/guardrail/agents/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t74">src/guardrail/agents/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t82">src/guardrail/agents/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t95">src/guardrail/agents/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t108">src/guardrail/agents/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html#t124">src/guardrail/agents/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html">src/guardrail/agents/base.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_business_analyst_py.html#t10">src/guardrail/agents/business_analyst.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_business_analyst_py.html#t22">src/guardrail/agents/business_analyst.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_business_analyst_py.html#t65">src/guardrail/agents/business_analyst.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_business_analyst_py.html#t71">src/guardrail/agents/business_analyst.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_business_analyst_py.html#t78">src/guardrail/agents/business_analyst.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_business_analyst_py.html">src/guardrail/agents/business_analyst.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html#t10">src/guardrail/agents/coder.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html#t19">src/guardrail/agents/coder.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html#t93">src/guardrail/agents/coder.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html#t117">src/guardrail/agents/coder.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html#t147">src/guardrail/agents/coder.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html#t176">src/guardrail/agents/coder.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html#t206">src/guardrail/agents/coder.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html">src/guardrail/agents/coder.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html#t10">src/guardrail/agents/dba.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html#t14">src/guardrail/agents/dba.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html#t52">src/guardrail/agents/dba.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html#t57">src/guardrail/agents/dba.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html#t62">src/guardrail/agents/dba.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html#t67">src/guardrail/agents/dba.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html">src/guardrail/agents/dba.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_debug_hunter_py.html#t10">src/guardrail/agents/debug_hunter.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_debug_hunter_py.html#t14">src/guardrail/agents/debug_hunter.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_debug_hunter_py.html#t48">src/guardrail/agents/debug_hunter.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_debug_hunter_py.html#t53">src/guardrail/agents/debug_hunter.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_debug_hunter_py.html#t61">src/guardrail/agents/debug_hunter.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_debug_hunter_py.html">src/guardrail/agents/debug_hunter.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_documentation_py.html#t10">src/guardrail/agents/documentation.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_documentation_py.html#t14">src/guardrail/agents/documentation.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_documentation_py.html#t44">src/guardrail/agents/documentation.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_documentation_py.html#t47">src/guardrail/agents/documentation.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_documentation_py.html#t50">src/guardrail/agents/documentation.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_documentation_py.html">src/guardrail/agents/documentation.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_evaluator_py.html#t10">src/guardrail/agents/evaluator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_evaluator_py.html#t14">src/guardrail/agents/evaluator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_evaluator_py.html">src/guardrail/agents/evaluator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html#t12">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html#t24">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html#t33">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html#t63">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html#t185">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html#t226">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html#t254">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html#t280">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html#t10">src/guardrail/agents/secops.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html#t14">src/guardrail/agents/secops.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html#t50">src/guardrail/agents/secops.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html#t55">src/guardrail/agents/secops.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html#t60">src/guardrail/agents/secops.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html#t65">src/guardrail/agents/secops.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html">src/guardrail/agents/secops.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_sre_py.html#t10">src/guardrail/agents/sre.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_sre_py.html#t14">src/guardrail/agents/sre.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_sre_py.html#t44">src/guardrail/agents/sre.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_sre_py.html#t49">src/guardrail/agents/sre.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_sre_py.html#t54">src/guardrail/agents/sre.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_sre_py.html">src/guardrail/agents/sre.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_standards_oracle_py.html#t10">src/guardrail/agents/standards_oracle.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_standards_oracle_py.html#t14">src/guardrail/agents/standards_oracle.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_standards_oracle_py.html#t44">src/guardrail/agents/standards_oracle.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_standards_oracle_py.html#t53">src/guardrail/agents/standards_oracle.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_standards_oracle_py.html#t57">src/guardrail/agents/standards_oracle.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_standards_oracle_py.html">src/guardrail/agents/standards_oracle.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html#t10">src/guardrail/agents/tester.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html#t19">src/guardrail/agents/tester.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html#t93">src/guardrail/agents/tester.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html#t124">src/guardrail/agents/tester.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html#t156">src/guardrail/agents/tester.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html#t189">src/guardrail/agents/tester.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html">src/guardrail/agents/tester.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html#t10">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html#t14">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html#t52">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html#t57">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html#t62">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html#t67">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091___init___py.html">src/guardrail/cli/__init__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t29">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t46">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t49">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t136">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t180">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t210">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t271">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t310">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t313">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t322">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t346">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t369">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html#t402">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html">src/guardrail/cli/commands.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9___init___py.html">src/guardrail/core/__init__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t18">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t22">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t34">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t38">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t42">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t72">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t85">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t85"><data value='load_guardrails'>ContextManager.load_guardrails</data></a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t132">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t175">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t205">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t217">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t251">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t262">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t286">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t291">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t299">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t310">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t310"><data value='get_guardrail_files_status'>ContextManager.get_guardrail_files_status</data></a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html#t330">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html">src/guardrail/core/context_manager.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t58">src/guardrail/core/daemon.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t80">src/guardrail/core/daemon.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t99">src/guardrail/core/daemon.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t235">src/guardrail/core/daemon.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t276">src/guardrail/core/daemon.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html#t345">src/guardrail/core/daemon.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html">src/guardrail/core/daemon.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t153">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t159">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t166">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t229">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t269">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t280">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t294">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t308">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html#t351">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html">src/guardrail/core/failure_detector.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_logger_py.html#t13">src/guardrail/core/logger.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_logger_py.html#t19">src/guardrail/core/logger.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_logger_py.html#t101">src/guardrail/core/logger.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_logger_py.html">src/guardrail/core/logger.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t99">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t131">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t172">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t193">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t213">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t235">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t260">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t297">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t323">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html#t340">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html">src/guardrail/core/parser.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t172">src/guardrail/core/validator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t181">src/guardrail/core/validator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t211">src/guardrail/core/validator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t281">src/guardrail/core/validator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t281"><data value='check_ai_guardrails'>GuardrailValidator._check_ai_guardrails</data></a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t318">src/guardrail/core/validator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t391">src/guardrail/core/validator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t406">src/guardrail/core/validator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html#t417">src/guardrail/core/validator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html">src/guardrail/core/validator.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t21">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t34">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t38">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t44">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t53">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t78">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t101">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t110">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t137">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t157">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t187">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t196">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t205">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t214">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t223">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t232">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t241">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t254">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t282">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t294">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t344">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t369">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t383">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t388">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t400">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t428">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t438">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html#t444">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html">src/guardrail/core/workers.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_09ed0ebd9e054c99_main_py.html">src/guardrail/main.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36___init___py.html">src/guardrail/utils/__init__.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t30">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t42">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t55">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t63">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t113">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t180">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t189">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t203">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t255">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t282">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t293">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t309">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t329">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t349">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html#t358">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html">src/guardrail/utils/config.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t35">src/guardrail/utils/db.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t43">src/guardrail/utils/db.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t223">src/guardrail/utils/db.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t236">src/guardrail/utils/db.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t253">src/guardrail/utils/db.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t257">src/guardrail/utils/db.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html#t268">src/guardrail/utils/db.py</a></td>
htmlcov/function_index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html">src/guardrail/utils/db.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_09ed0ebd9e054c99___init___py.html">src/guardrail/__init__.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_09ed0ebd9e054c99___main___py.html">src/guardrail/__main__.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_19268f81456598d2___init___py.html">src/guardrail/adapters/__init__.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_19268f81456598d2_base_py.html">src/guardrail/adapters/base.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_19268f81456598d2_claude_py.html">src/guardrail/adapters/claude.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_19268f81456598d2_codex_py.html">src/guardrail/adapters/codex.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_19268f81456598d2_gemini_py.html">src/guardrail/adapters/gemini.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca___init___py.html">src/guardrail/agents/__init__.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_architect_py.html">src/guardrail/agents/architect.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_base_py.html">src/guardrail/agents/base.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_business_analyst_py.html">src/guardrail/agents/business_analyst.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_coder_py.html">src/guardrail/agents/coder.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_dba_py.html">src/guardrail/agents/dba.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_debug_hunter_py.html">src/guardrail/agents/debug_hunter.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_documentation_py.html">src/guardrail/agents/documentation.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_evaluator_py.html">src/guardrail/agents/evaluator.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_orchestrator_py.html">src/guardrail/agents/orchestrator.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_secops_py.html">src/guardrail/agents/secops.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_sre_py.html">src/guardrail/agents/sre.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_standards_oracle_py.html">src/guardrail/agents/standards_oracle.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_tester_py.html">src/guardrail/agents/tester.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_8a7904fe3fff7cca_ux_designer_py.html">src/guardrail/agents/ux_designer.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_9b966fc63b64f091___init___py.html">src/guardrail/cli/__init__.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_9b966fc63b64f091_commands_py.html">src/guardrail/cli/commands.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_a3d981cf838451f9___init___py.html">src/guardrail/core/__init__.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_a3d981cf838451f9_context_manager_py.html">src/guardrail/core/context_manager.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_a3d981cf838451f9_daemon_py.html">src/guardrail/core/daemon.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_a3d981cf838451f9_failure_detector_py.html">src/guardrail/core/failure_detector.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_a3d981cf838451f9_logger_py.html">src/guardrail/core/logger.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_a3d981cf838451f9_parser_py.html">src/guardrail/core/parser.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_a3d981cf838451f9_validator_py.html">src/guardrail/core/validator.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_a3d981cf838451f9_workers_py.html">src/guardrail/core/workers.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_09ed0ebd9e054c99_main_py.html">src/guardrail/main.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36___init___py.html">src/guardrail/utils/__init__.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_config_py.html">src/guardrail/utils/config.py</a></td>
htmlcov/index.html:                <td class="name left"><a href="z_0a9bde6dae2baa36_db_py.html">src/guardrail/utils/db.py</a></td>
htmlcov/z_8a7904fe3fff7cca_sre_py.html:    <title>Coverage for src/guardrail/agents/sre.py: 34%</title>
htmlcov/z_8a7904fe3fff7cca_sre_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/sre.py</b>:
htmlcov/z_8a7904fe3fff7cca_sre_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_sre_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_sre_py.html:    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"sre"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/sre.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_failure_detector_py.html:    <title>Coverage for src/guardrail/core/failure_detector.py: 97%</title>
htmlcov/z_a3d981cf838451f9_failure_detector_py.html:            <span class="text">Coverage for </span><b>src/guardrail/core/failure_detector.py</b>:
htmlcov/z_a3d981cf838451f9_failure_detector_py.html:    <p class="run run2"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">            <span class="str">"suggestion"</span><span class="op">:</span> <span class="str">"Apply UX/UI guardrails for better user experience."</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <title>Coverage for src/guardrail/cli/commands.py: 59%</title>
htmlcov/z_9b966fc63b64f091_commands_py.html:            <span class="text">Coverage for </span><b>src/guardrail/cli/commands.py</b>:
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">daemon</span> <span class="key">import</span> <span class="nam">AIRequest</span><span class="op">,</span> <span class="nam">GuardrailDaemon</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">workers</span> <span class="key">import</span> <span class="nam">WorkerManager</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span><span class="op">,</span> <span class="nam">ConfigManager</span><span class="op">,</span> <span class="nam">get_config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">db</span> <span class="key">import</span> <span class="nam">DatabaseManager</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="pln"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">    <span class="str">"""Execute AI tool with guardrails"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run run2"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">                    <span class="fst">f"</span><span class="fst">[cyan]Running </span><span class="op">{</span><span class="nam">tool</span><span class="op">}</span><span class="fst"> with guardrails...</span><span class="fst">"</span><span class="op">,</span> <span class="nam">total</span><span class="op">=</span><span class="key">None</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">                        <span class="nam">violation</span><span class="op">.</span><span class="nam">guardrail_type</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="pln"><span class="n"><a id="t137" href="#t137">137</a></span><span class="t">    <span class="str">"""Initialize guardrail configuration"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="pln"><span class="n"><a id="t162" href="#t162">162</a></span><span class="t">    <span class="com"># Copy guardrail files (if they don't exist)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t163" href="#t163">163</a></span><span class="t">    <span class="nam">guardrails_path</span> <span class="op">=</span> <span class="nam">Path</span><span class="op">(</span><span class="nam">config</span><span class="op">.</span><span class="nam">guardrails</span><span class="op">.</span><span class="nam">base_path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t164" href="#t164">164</a></span><span class="t">    <span class="nam">console</span><span class="op">.</span><span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">&#128203; Guardrails directory: [cyan]</span><span class="op">{</span><span class="nam">guardrails_path</span><span class="op">}</span><span class="fst">[/cyan]</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t166" href="#t166">166</a></span><span class="t">    <span class="key">if</span> <span class="key">not</span> <span class="nam">guardrails_path</span><span class="op">.</span><span class="nam">exists</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t167" href="#t167">167</a></span><span class="t">        <span class="nam">guardrails_path</span><span class="op">.</span><span class="nam">mkdir</span><span class="op">(</span><span class="nam">parents</span><span class="op">=</span><span class="key">True</span><span class="op">,</span> <span class="nam">exist_ok</span><span class="op">=</span><span class="key">True</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t168" href="#t168">168</a></span><span class="t">        <span class="nam">console</span><span class="op">.</span><span class="nam">print</span><span class="op">(</span><span class="str">"   Note: Place your guardrail files in this directory"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t172" href="#t172">172</a></span><span class="t">    <span class="nam">console</span><span class="op">.</span><span class="nam">print</span><span class="op">(</span><span class="str">"  1. Add guardrail files to: [cyan]~/.guardrail/guardrails/[/cyan]"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t173" href="#t173">173</a></span><span class="t">    <span class="nam">console</span><span class="op">.</span><span class="nam">print</span><span class="op">(</span><span class="str">"  2. Configure: [cyan]guardrail config[/cyan]"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="run"><span class="n"><a id="t174" href="#t174">174</a></span><span class="t">    <span class="nam">console</span><span class="op">.</span><span class="nam">print</span><span class="op">(</span><span class="str">"  3. Test: [cyan]guardrail run claude 'Hello, world!'[/cyan]"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="pln"><span class="n"><a id="t211" href="#t211">211</a></span><span class="t">    <span class="str">"""Show guardrail system status"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="pln"><span class="n"><a id="t311" href="#t311">311</a></span><span class="t">    <span class="str">"""Start guardrail daemon with background workers"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_9b966fc63b64f091_commands_py.html:    <p class="pln"><span class="n"><a id="t370" href="#t370">370</a></span><span class="t">    <span class="str">"""Interactive guardrail session"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_19268f81456598d2_codex_py.html:    <title>Coverage for src/guardrail/adapters/codex.py: 39%</title>
htmlcov/z_19268f81456598d2_codex_py.html:            <span class="text">Coverage for </span><b>src/guardrail/adapters/codex.py</b>:
htmlcov/z_8a7904fe3fff7cca_standards_oracle_py.html:    <title>Coverage for src/guardrail/agents/standards_oracle.py: 27%</title>
htmlcov/z_8a7904fe3fff7cca_standards_oracle_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/standards_oracle.py</b>:
htmlcov/z_8a7904fe3fff7cca_standards_oracle_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_standards_oracle_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_standards_oracle_py.html:    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"standards_oracle"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/standards-oracle.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_tester_py.html:    <title>Coverage for src/guardrail/agents/tester.py: 97%</title>
htmlcov/z_8a7904fe3fff7cca_tester_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/tester.py</b>:
htmlcov/z_8a7904fe3fff7cca_tester_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_tester_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_tester_py.html:    <p class="run"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"tester"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/ruthless-tester.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_19268f81456598d2___init___py.html:    <title>Coverage for src/guardrail/adapters/__init__.py: 93%</title>
htmlcov/z_19268f81456598d2___init___py.html:            <span class="text">Coverage for </span><b>src/guardrail/adapters/__init__.py</b>:
htmlcov/z_19268f81456598d2___init___py.html:    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""AI tool adapters for guardrail.dev"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca___init___py.html:    <title>Coverage for src/guardrail/agents/__init__.py: 100%</title>
htmlcov/z_8a7904fe3fff7cca___init___py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/__init__.py</b>:
htmlcov/z_8a7904fe3fff7cca_business_analyst_py.html:    <title>Coverage for src/guardrail/agents/business_analyst.py: 34%</title>
htmlcov/z_8a7904fe3fff7cca_business_analyst_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/business_analyst.py</b>:
htmlcov/z_8a7904fe3fff7cca_business_analyst_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_business_analyst_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_business_analyst_py.html:    <p class="run run2"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t">            <span class="str">"~/.guardrail/guardrails/agents/business-analyst.md"</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_db_py.html:    <title>Coverage for src/guardrail/utils/db.py: 78%</title>
htmlcov/z_0a9bde6dae2baa36_db_py.html:            <span class="text">Coverage for </span><b>src/guardrail/utils/db.py</b>:
htmlcov/z_0a9bde6dae2baa36_db_py.html:    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""Database models and utilities for guardrail.dev"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_db_py.html:    <p class="run"><span class="n"><a id="t121" href="#t121">121</a></span><span class="t">    <span class="nam">guardrail_type</span> <span class="op">=</span> <span class="nam">Column</span><span class="op">(</span><span class="nam">String</span><span class="op">(</span><span class="num">20</span><span class="op">)</span><span class="op">,</span> <span class="nam">nullable</span><span class="op">=</span><span class="key">False</span><span class="op">,</span> <span class="nam">index</span><span class="op">=</span><span class="key">True</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_db_py.html:    <p class="run run2"><span class="n"><a id="t134" href="#t134">134</a></span><span class="t">            <span class="nam">guardrail_type</span><span class="op">.</span><span class="nam">in_</span><span class="op">(</span><span class="op">[</span><span class="str">"bpsbs"</span><span class="op">,</span> <span class="str">"ai"</span><span class="op">,</span> <span class="str">"ux_ui"</span><span class="op">,</span> <span class="str">"agent"</span><span class="op">]</span><span class="op">)</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_db_py.html:    <p class="run run2"><span class="n"><a id="t135" href="#t135">135</a></span><span class="t">            <span class="nam">name</span><span class="op">=</span><span class="str">"check_guardrail_type"</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_db_py.html:    <p class="run"><span class="n"><a id="t164" href="#t164">164</a></span><span class="t">    <span class="nam">__tablename__</span> <span class="op">=</span> <span class="str">"guardrail_versions"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_0a9bde6dae2baa36_db_py.html:    <p class="mis show_mis"><span class="n"><a id="t261" href="#t261">261</a></span><span class="t">            <span class="nam">backup_path</span> <span class="op">=</span> <span class="nam">str</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">db_path</span><span class="op">.</span><span class="nam">parent</span> <span class="op">/</span> <span class="fst">f"</span><span class="fst">guardrail_backup_</span><span class="op">{</span><span class="nam">timestamp</span><span class="op">}</span><span class="fst">.db</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_logger_py.html:    <title>Coverage for src/guardrail/core/logger.py: 29%</title>
htmlcov/z_a3d981cf838451f9_logger_py.html:            <span class="text">Coverage for </span><b>src/guardrail/core/logger.py</b>:
htmlcov/z_a3d981cf838451f9_logger_py.html:    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""Structured logging configuration for guardrail.dev"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_logger_py.html:    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">get_config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_logger_py.html:    <p class="mis show_mis"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t">    <span class="nam">event_dict</span><span class="op">[</span><span class="str">"app"</span><span class="op">]</span> <span class="op">=</span> <span class="str">"guardrail.dev"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_parser_py.html:    <title>Coverage for src/guardrail/core/parser.py: 93%</title>
htmlcov/z_a3d981cf838451f9_parser_py.html:            <span class="text">Coverage for </span><b>src/guardrail/core/parser.py</b>:
htmlcov/z_8a7904fe3fff7cca_debug_hunter_py.html:    <title>Coverage for src/guardrail/agents/debug_hunter.py: 29%</title>
htmlcov/z_8a7904fe3fff7cca_debug_hunter_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/debug_hunter.py</b>:
htmlcov/z_8a7904fe3fff7cca_debug_hunter_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_debug_hunter_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_debug_hunter_py.html:    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"debug_hunter"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/debug-hunter.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_19268f81456598d2_gemini_py.html:    <title>Coverage for src/guardrail/adapters/gemini.py: 39%</title>
htmlcov/z_19268f81456598d2_gemini_py.html:            <span class="text">Coverage for </span><b>src/guardrail/adapters/gemini.py</b>:
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <title>Coverage for src/guardrail/core/context_manager.py: 83%</title>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:            <span class="text">Coverage for </span><b>src/guardrail/core/context_manager.py</b>:
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""Context Manager for building enhanced prompts with guardrails"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">get_config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t">    <span class="str">"""Cache for guardrail content with TTL"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t">    <span class="str">"""Manages context building with guardrails for AI prompts"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">guardrails_path</span> <span class="op">=</span> <span class="nam">Path</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">guardrails</span><span class="op">.</span><span class="nam">base_path</span><span class="op">)</span><span class="op">.</span><span class="nam">expanduser</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">agents_path</span> <span class="op">=</span> <span class="nam">Path</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">guardrails</span><span class="op">.</span><span class="nam">agents_path</span><span class="op">)</span><span class="op">.</span><span class="nam">expanduser</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">            <span class="nam">guardrails_path</span><span class="op">=</span><span class="nam">str</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">guardrails_path</span><span class="op">)</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">    <span class="key">def</span> <span class="nam">load_guardrails</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">agent</span><span class="op">:</span> <span class="nam">Optional</span><span class="op">[</span><span class="nam">str</span><span class="op">]</span> <span class="op">=</span> <span class="key">None</span><span class="op">,</span> <span class="nam">mode</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"standard"</span><span class="op">)</span> <span class="op">-></span> <span class="nam">str</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">        <span class="str">"""Load all relevant guardrails based on agent and mode</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t"><span class="str">            Combined guardrail content as string</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">        <span class="nam">cache_key</span> <span class="op">=</span> <span class="fst">f"</span><span class="fst">guardrails_</span><span class="op">{</span><span class="nam">agent</span><span class="op">}</span><span class="fst">_</span><span class="op">{</span><span class="nam">mode</span><span class="op">}</span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t103" href="#t103">103</a></span><span class="t">        <span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="str">"Loading guardrails"</span><span class="op">,</span> <span class="nam">agent</span><span class="op">=</span><span class="nam">agent</span><span class="op">,</span> <span class="nam">mode</span><span class="op">=</span><span class="nam">mode</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t105" href="#t105">105</a></span><span class="t">        <span class="nam">guardrails_content</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t107" href="#t107">107</a></span><span class="t">        <span class="com"># Load core guardrail files</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t108" href="#t108">108</a></span><span class="t">        <span class="key">for</span> <span class="nam">filename</span> <span class="key">in</span> <span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">guardrails</span><span class="op">.</span><span class="nam">files</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t109" href="#t109">109</a></span><span class="t">            <span class="nam">content</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_load_file</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">guardrails_path</span> <span class="op">/</span> <span class="nam">filename</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="mis show_mis"><span class="n"><a id="t111" href="#t111">111</a></span><span class="t">                <span class="nam">guardrails_content</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span><span class="fst">f"</span><span class="fst"># </span><span class="op">{</span><span class="nam">filename</span><span class="op">}</span><span class="fst">\n\n</span><span class="op">{</span><span class="nam">content</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="mis show_mis"><span class="n"><a id="t117" href="#t117">117</a></span><span class="t">                <span class="nam">guardrails_content</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t122" href="#t122">122</a></span><span class="t">        <span class="nam">combined</span> <span class="op">=</span> <span class="str">"\n\n---\n\n"</span><span class="op">.</span><span class="nam">join</span><span class="op">(</span><span class="nam">guardrails_content</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t135" href="#t135">135</a></span><span class="t">        <span class="str">"""Build complete context with guardrails and user prompt</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t143" href="#t143">143</a></span><span class="t"><span class="str">            Complete enhanced prompt with guardrails</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t147" href="#t147">147</a></span><span class="t">        <span class="nam">guardrails</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">load_guardrails</span><span class="op">(</span><span class="nam">agent</span><span class="op">=</span><span class="nam">agent</span><span class="op">,</span> <span class="nam">mode</span><span class="op">=</span><span class="nam">mode</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t151" href="#t151">151</a></span><span class="t">            <span class="str">"&lt;guardrails>"</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t152" href="#t152">152</a></span><span class="t">            <span class="nam">guardrails</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t155" href="#t155">155</a></span><span class="t">            <span class="str">"&lt;/guardrails>"</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="mis show_mis"><span class="n"><a id="t196" href="#t196">196</a></span><span class="t">            <span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="str">"Loaded guardrail file"</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">=</span><span class="nam">str</span><span class="op">(</span><span class="nam">file_path</span><span class="op">)</span><span class="op">,</span> <span class="nam">size</span><span class="op">=</span><span class="nam">len</span><span class="op">(</span><span class="nam">content</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t201" href="#t201">201</a></span><span class="t">                <span class="str">"Error loading guardrail file"</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">=</span><span class="nam">str</span><span class="op">(</span><span class="nam">file_path</span><span class="op">)</span><span class="op">,</span> <span class="nam">error</span><span class="op">=</span><span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t232" href="#t232">232</a></span><span class="t"><span class="str">- All guardrail violations must be addressed before approval</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t235" href="#t235">235</a></span><span class="t"><span class="str">- Full compliance with BPSBS, AI, and UX/UI guardrails</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t243" href="#t243">243</a></span><span class="t"><span class="str">- Follow guardrails as guidance</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="mis show_mis"><span class="n"><a id="t288" href="#t288">288</a></span><span class="t">        <span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="str">"Refreshing guardrail cache"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t310" href="#t310">310</a></span><span class="t">    <span class="key">def</span> <span class="nam">get_guardrail_files_status</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">bool</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t311" href="#t311">311</a></span><span class="t">        <span class="str">"""Check which guardrail files exist</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="pln"><span class="n"><a id="t318" href="#t318">318</a></span><span class="t">        <span class="com"># Check core guardrail files</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t319" href="#t319">319</a></span><span class="t">        <span class="key">for</span> <span class="nam">filename</span> <span class="key">in</span> <span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">.</span><span class="nam">guardrails</span><span class="op">.</span><span class="nam">files</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t320" href="#t320">320</a></span><span class="t">            <span class="nam">file_path</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">guardrails_path</span> <span class="op">/</span> <span class="nam">filename</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run"><span class="n"><a id="t336" href="#t336">336</a></span><span class="t">        <span class="nam">file_status</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">get_guardrail_files_status</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t343" href="#t343">343</a></span><span class="t">            <span class="str">"total_guardrail_files"</span><span class="op">:</span> <span class="nam">total_files</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t344" href="#t344">344</a></span><span class="t">            <span class="str">"existing_guardrail_files"</span><span class="op">:</span> <span class="nam">existing_files</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t345" href="#t345">345</a></span><span class="t">            <span class="str">"missing_guardrail_files"</span><span class="op">:</span> <span class="nam">total_files</span> <span class="op">-</span> <span class="nam">existing_files</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_context_manager_py.html:    <p class="run run2"><span class="n"><a id="t347" href="#t347">347</a></span><span class="t">            <span class="str">"guardrails_path"</span><span class="op">:</span> <span class="nam">str</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">guardrails_path</span><span class="op">)</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_ux_designer_py.html:    <title>Coverage for src/guardrail/agents/ux_designer.py: 32%</title>
htmlcov/z_8a7904fe3fff7cca_ux_designer_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/ux_designer.py</b>:
htmlcov/z_8a7904fe3fff7cca_ux_designer_py.html:    <p class="run"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">agents</span><span class="op">.</span><span class="nam">base</span> <span class="key">import</span> <span class="nam">AgentContext</span><span class="op">,</span> <span class="nam">AgentDecision</span><span class="op">,</span> <span class="nam">BaseAgent</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_ux_designer_py.html:    <p class="run"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">Config</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_ux_designer_py.html:    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t">        <span class="nam">super</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">__init__</span><span class="op">(</span><span class="str">"ux_designer"</span><span class="op">,</span> <span class="str">"~/.guardrail/guardrails/agents/ux-designer.md"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <title>Coverage for src/guardrail/core/validator.py: 99%</title>
htmlcov/z_a3d981cf838451f9_validator_py.html:            <span class="text">Coverage for </span><b>src/guardrail/core/validator.py</b>:
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="pln"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">    <span class="str">"""Types of guardrails"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t">    <span class="nam">AI_GUARDRAILS</span> <span class="op">=</span> <span class="str">"ai_guardrails"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="pln"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">    <span class="str">"""Represents a guardrail violation"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">    <span class="nam">guardrail_type</span><span class="op">:</span> <span class="nam">str</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="pln"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">    <span class="str">"""Validates AI outputs against guardrail rules"""</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="pln"><span class="n"><a id="t182" href="#t182">182</a></span><span class="t">        <span class="str">"""Validate parsed response against all guardrails</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run"><span class="n"><a id="t197" href="#t197">197</a></span><span class="t">        <span class="nam">violations</span><span class="op">.</span><span class="nam">extend</span><span class="op">(</span><span class="key">await</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_check_ai_guardrails</span><span class="op">(</span><span class="nam">parsed</span><span class="op">,</span> <span class="nam">raw_text</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="pln"><span class="n"><a id="t212" href="#t212">212</a></span><span class="t">        <span class="str">"""Check BPSBS (Best Practices, Security, Business Standards) guardrails</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run run2"><span class="n"><a id="t241" href="#t241">241</a></span><span class="t">                                <span class="nam">guardrail_type</span><span class="op">=</span><span class="nam">GuardrailType</span><span class="op">.</span><span class="nam">BPSBS</span><span class="op">.</span><span class="nam">value</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run run2"><span class="n"><a id="t252" href="#t252">252</a></span><span class="t">                            <span class="nam">guardrail_type</span><span class="op">=</span><span class="nam">GuardrailType</span><span class="op">.</span><span class="nam">BPSBS</span><span class="op">.</span><span class="nam">value</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run run2"><span class="n"><a id="t270" href="#t270">270</a></span><span class="t">                        <span class="nam">guardrail_type</span><span class="op">=</span><span class="nam">GuardrailType</span><span class="op">.</span><span class="nam">BPSBS</span><span class="op">.</span><span class="nam">value</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run"><span class="n"><a id="t281" href="#t281">281</a></span><span class="t">    <span class="key">async</span> <span class="key">def</span> <span class="nam">_check_ai_guardrails</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">parsed</span><span class="op">:</span> <span class="nam">ParsedResponse</span><span class="op">,</span> <span class="nam">text</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="nam">List</span><span class="op">[</span><span class="nam">Violation</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="pln"><span class="n"><a id="t282" href="#t282">282</a></span><span class="t">        <span class="str">"""Check AI-specific guardrails</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run run2"><span class="n"><a id="t307" href="#t307">307</a></span><span class="t">                        <span class="nam">guardrail_type</span><span class="op">=</span><span class="nam">GuardrailType</span><span class="op">.</span><span class="nam">AI_GUARDRAILS</span><span class="op">.</span><span class="nam">value</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run"><span class="n"><a id="t315" href="#t315">315</a></span><span class="t">        <span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="str">"AI guardrails check complete"</span><span class="op">,</span> <span class="nam">violations</span><span class="op">=</span><span class="nam">len</span><span class="op">(</span><span class="nam">violations</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="pln"><span class="n"><a id="t319" href="#t319">319</a></span><span class="t">        <span class="str">"""Check UX/UI guardrails</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="mis mis2 show_mis"><span class="n"><a id="t345" href="#t345">345</a></span><span class="t">                            <span class="nam">guardrail_type</span><span class="op">=</span><span class="nam">GuardrailType</span><span class="op">.</span><span class="nam">UX_UI</span><span class="op">.</span><span class="nam">value</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run run2"><span class="n"><a id="t361" href="#t361">361</a></span><span class="t">                                <span class="nam">guardrail_type</span><span class="op">=</span><span class="nam">GuardrailType</span><span class="op">.</span><span class="nam">UX_UI</span><span class="op">.</span><span class="nam">value</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run run2"><span class="n"><a id="t380" href="#t380">380</a></span><span class="t">                        <span class="nam">guardrail_type</span><span class="op">=</span><span class="nam">GuardrailType</span><span class="op">.</span><span class="nam">UX_UI</span><span class="op">.</span><span class="nam">value</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run"><span class="n"><a id="t427" href="#t427">427</a></span><span class="t">            <span class="key">return</span> <span class="str">"&#10003; No violations found - all guardrails passed!"</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run"><span class="n"><a id="t429" href="#t429">429</a></span><span class="t">        <span class="nam">report_lines</span> <span class="op">=</span> <span class="op">[</span><span class="fst">f"</span><span class="fst">\n&#9888;&#65039;  Found </span><span class="op">{</span><span class="nam">len</span><span class="op">(</span><span class="nam">violations</span><span class="op">)</span><span class="op">}</span><span class="fst"> guardrail violation(s):\n</span><span class="fst">"</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_a3d981cf838451f9_validator_py.html:    <p class="run"><span class="n"><a id="t447" href="#t447">447</a></span><span class="t">                    <span class="nam">report_lines</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span><span class="fst">f"</span><span class="fst">  &#8226; [</span><span class="op">{</span><span class="nam">v</span><span class="op">.</span><span class="nam">guardrail_type</span><span class="op">}</span><span class="fst">] </span><span class="op">{</span><span class="nam">v</span><span class="op">.</span><span class="nam">description</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_base_py.html:    <title>Coverage for src/guardrail/agents/base.py: 82%</title>
htmlcov/z_8a7904fe3fff7cca_base_py.html:            <span class="text">Coverage for </span><b>src/guardrail/agents/base.py</b>:
htmlcov/z_8a7904fe3fff7cca_base_py.html:    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">failure_detector</span> <span class="key">import</span> <span class="nam">DetectedFailure</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_base_py.html:    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">parser</span> <span class="key">import</span> <span class="nam">ParsedResponse</span>&nbsp;</span><span class="r"></span></p>
htmlcov/z_8a7904fe3fff7cca_base_py.html:    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">from</span> <span class="nam">guardrail</span><span class="op">.</span><span class="nam">core</span><span class="op">.</span><span class="nam">validator</span> <span class="key">import</span> <span class="nam">Violation</span>&nbsp;</span><span class="r"></span></p>
landing-page/index.html:                    <p class="step-description">Creates ~/.guardrail/ with your organization's guardrails</p>
landing-page/index.html:                        <p>AI suggestions with guardrail recommendations</p>
landing-page/index.html:                <a href="https://github.com/guardrail-dev/guardrail" class="btn btn-primary">Get Started on GitHub</a>
landing-page/index.html:                <a href="https://docs.guardrail.dev" class="btn btn-secondary">Read Documentation</a>
landing-page/index.html:                        <li><a href="https://docs.guardrail.dev">Documentation</a></li>
landing-page/index.html:                        <li><a href="https://github.com/guardrail-dev/guardrail">GitHub</a></li>
landing-page/index.html:                        <li><a href="https://pypi.org/project/guardrail/">PyPI</a></li>
landing-page/index.html:                        <li><a href="https://docs.guardrail.dev/getting-started">Getting Started</a></li>
landing-page/index.html:                        <li><a href="https://docs.guardrail.dev/configuration">Configuration</a></li>
landing-page/index.html:                        <li><a href="https://docs.guardrail.dev/api">API Reference</a></li>
landing-page/index.html:                        <li><a href="https://github.com/guardrail-dev/guardrail/issues">Support</a></li>
landing-page/index.html:                        <li><a href="https://github.com/guardrail-dev/guardrail">GitHub</a></li>
landing-page/index.html:                        <li><a href="https://twitter.com/guardraildev">Twitter</a></li>
landing-page/index.html:                        <li><a href="https://discord.gg/guardrail">Discord</a></li>
landing-page/index.html:                        <li><a href="https://github.com/guardrail-dev/guardrail/blob/main/CONTRIBUTING.md">Contributing</a></li>
landing-page/index.html:                        <li><a href="https://github.com/guardrail-dev/guardrail/blob/main/LICENSE">MIT License</a></li>
landing-page/index.html:                <p>&copy; 2025 guardrail.dev. Made with ‚ù§Ô∏è by developers, for developers.</p>
pyproject.toml:keywords = ["ai", "llm", "guardrails", "claude", "gemini", "codex", "governance"]
scripts/test_agent_summaries.py:AGENTS_PATH = Path.home() / ".guardrail" / "guardrails" / "agents"
scripts/uninstall.sh:read -p "Remove ~/.guardrail directory? (y/N) " -n 1 -r
scripts/uninstall.sh:    if [ -f ~/.guardrail/data/guardrail.db ]; then
scripts/uninstall.sh:        BACKUP_FILE=~/guardrail_backup_$(date +%Y%m%d_%H%M%S).db
scripts/uninstall.sh:        cp ~/.guardrail/data/guardrail.db "$BACKUP_FILE"
scripts/uninstall.sh:    rm -rf ~/.guardrail
scripts/uninstall.sh:pip uninstall -y guardrail || echo "   ‚ö†Ô∏è  Package not installed via pip"
scripts/install.sh:INSTALL_DIR="$HOME/.guardrail"
scripts/install.sh:    mkdir -p "$INSTALL_DIR"/{guardrails/agents,data,logs}
scripts/install.sh:# Copy guardrail documents
scripts/install.sh:copy_guardrails() {
scripts/install.sh:    echo -e "${YELLOW}‚Üí${NC} Copying guardrail documents..."
scripts/install.sh:    if [ -d "guardrails" ]; then
scripts/install.sh:        cp -r guardrails/* "$INSTALL_DIR/guardrails/"
scripts/install.sh:        echo -e "   You can add them later to $INSTALL_DIR/guardrails/"
scripts/install.sh:guardrails:
scripts/install.sh:  base_path: "~/.guardrail/guardrails"
scripts/install.sh:  agents_path: "~/.guardrail/guardrails/agents"
scripts/install.sh:  path: "~/.guardrail/data/guardrail.db"
scripts/install.sh:  file: "~/.guardrail/logs/guardrail.log"
scripts/install.sh:    copy_guardrails
scripts/README.md:source ~/.guardrail/venv/bin/activate
scripts/README.md:guardrail --version
scripts/README.md:#### `guardrail-wrapper.sh`
scripts/README.md:**Purpose**: Intercept AI tool calls and route through guardrails
scripts/README.md:guardrail-wrapper <tool> <prompt>
scripts/README.md:guardrail-wrapper claude "Create a login form"
scripts/README.md:GUARDRAIL_MODE=strict GUARDRAIL_AGENT=architect guardrail-wrapper claude "Design auth service"
scripts/README.md:gr               # Short for guardrail
scripts/README.md:Located at: `~/.guardrail/config.yaml`
scripts/README.md:Edit directly or use: `guardrail config`
scripts/README.md:vim ~/.guardrail/config.yaml
scripts/README.md:which guardrail
scripts/README.md:bash scripts/guardrail-wrapper.sh claude "test prompt"
scripts/README.md:GUARDRAIL_MODE=strict bash scripts/guardrail-wrapper.sh claude "test"
scripts/README.md:   vim scripts/guardrail-wrapper.sh
scripts/README.md:   chmod +x scripts/guardrail-wrapper.sh
scripts/README.md:   bash scripts/guardrail-wrapper.sh <tool> <prompt>
scripts/README.md:- Use version control for guardrail files
scripts/test_core_guardrails.py:"""Test and validate core guardrail token counts"""
scripts/test_core_guardrails.py:GUARDRAILS_PATH = Path.home() / ".guardrail" / "guardrails"
scripts/test_core_guardrails.py:def test_guardrail_files():
scripts/test_core_guardrails.py:    """Test all guardrail files and report token counts"""
scripts/test_core_guardrails.py:    success = test_guardrail_files()
scripts/setup_aliases.sh:# Shell alias setup for guardrail.dev
scripts/setup_aliases.sh:# Remove old guardrail aliases if they exist
scripts/setup_aliases.sh:alias gr='guardrail'
scripts/setup_aliases.sh:alias grc='guardrail claude'
scripts/setup_aliases.sh:alias grg='guardrail gemini'
scripts/setup_aliases.sh:alias grx='guardrail codex'
scripts/setup_aliases.sh:alias gr-strict='guardrail --mode strict'
scripts/setup_aliases.sh:alias gr-stats='guardrail stats'
scripts/setup_aliases.sh:alias gr-config='guardrail config'
scripts/setup_aliases.sh:alias gr-logs='guardrail logs'
scripts/setup_aliases.sh:alias gr-arch='guardrail --agent architect'
scripts/setup_aliases.sh:alias gr-code='guardrail --agent coder'
scripts/setup_aliases.sh:alias gr-test='guardrail --agent tester'
scripts/setup_aliases.sh:alias gr-review='guardrail --agent reviewer'
scripts/setup_aliases.sh:alias gr-sec='guardrail --agent security'
scripts/setup_aliases.sh:alias gr-perf='guardrail --agent performance'
scripts/setup_aliases.sh:alias gr-ux='guardrail --agent ux'
scripts/setup_aliases.sh:alias gr-docs='guardrail --agent docs'
scripts/setup_aliases.sh:alias gr-debug='guardrail --agent debug'
scripts/setup_aliases.sh:echo -e "  ${GREEN}gr${NC}              - Short for 'guardrail'"
scripts/setup_aliases.sh:echo -e "  ${GREEN}grc${NC}             - guardrail claude"
scripts/setup_aliases.sh:echo -e "  ${GREEN}grg${NC}             - guardrail gemini"
scripts/setup_aliases.sh:echo -e "  ${GREEN}grx${NC}             - guardrail codex"
scripts/generate_agent_summaries.py:"""Generate summary and checklist versions of agent guardrails"""
scripts/generate_agent_summaries.py:AGENTS_PATH = Path.home() / ".guardrail" / "guardrails" / "agents"
scripts/generate_agent_summaries.py:- Enforce all guardrail compliance
scripts/generate_agent_summaries.py:- All guardrails passed
scripts/guardrail-wrapper.sh:# Usage: guardrail-wrapper <tool> <prompt>
scripts/guardrail-wrapper.sh:# Check if guardrail is installed
scripts/guardrail-wrapper.sh:if ! command -v guardrail &> /dev/null; then
scripts/guardrail-wrapper.sh:    echo "‚ùå Error: guardrail is not installed"
scripts/guardrail-wrapper.sh:    echo "Run: pip install guardrail"
scripts/guardrail-wrapper.sh:# Build guardrail command
scripts/guardrail-wrapper.sh:GUARDRAIL_CMD="guardrail run $TOOL \"$PROMPT\" --agent \"$AGENT\" --mode \"$MODE\""
scripts/guardrail-wrapper.sh:# Execute with guardrails
scripts/generate_core_guardrails.py:"""Generate core and specialized guardrail files"""
scripts/generate_core_guardrails.py:GUARDRAILS_PATH = Path.home() / ".guardrail" / "guardrails"
scripts/generate_core_guardrails.py:    print("Creating core guardrails...")
scripts/benchmark_optimization.py:    # Create mock guardrails
scripts/benchmark_optimization.py:    guardrails = []
scripts/benchmark_optimization.py:        guardrails.append(g)
scripts/benchmark_optimization.py:    asyncio.run(matcher.index_guardrails(guardrails))
scripts/benchmark_optimization.py:                guardrails=guardrails,
src/guardloop.egg-info/SOURCES.txt:guardrails/AI_Failure_Modes.md
src/guardloop.egg-info/SOURCES.txt:guardrails/AI_Guardrails.md
src/guardloop.egg-info/SOURCES.txt:guardrails/AI_Troubleshooting_Guide.md
src/guardloop.egg-info/SOURCES.txt:guardrails/BPSBS.md
src/guardloop.egg-info/SOURCES.txt:guardrails/README.md
src/guardloop.egg-info/SOURCES.txt:guardrails/UX_UI_Guardrails.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/README.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/business-analyst.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/cold-blooded-architect.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/dba.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/documentation-codifier.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/merciless-evaluator.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/orchestrator.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/ruthless-coder.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/ruthless-tester.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/secops-engineer.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/sre-ops.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/standards-oracle.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/support-debug-hunter.md
src/guardloop.egg-info/SOURCES.txt:guardrails/agents/ux-ui-designer.md
src/guardloop.egg-info/SOURCES.txt:scripts/guardrail-wrapper.sh
src/guardloop.egg-info/SOURCES.txt:src/guardloop/core/adaptive_guardrails.py
src/guardloop.egg-info/PKG-INFO:Keywords: ai,llm,guardrails,claude,gemini,codex,governance
src/guardloop.egg-info/PKG-INFO:> An experimental system that learns from LLM failures and generates adaptive guardrails.
src/guardloop.egg-info/PKG-INFO:3. üß† **Learn** and generate dynamic guardrails
src/guardloop.egg-info/PKG-INFO:- ‚úÖ Dynamic guardrail generation from failures
src/guardloop.egg-info/PKG-INFO:- ‚úÖ Task classification (skip guardrails for creative work)
src/guardloop.egg-info/PKG-INFO:- ‚úÖ Pre-warm cache for instant guardrail loading (99.9% faster first request)
src/guardloop.egg-info/PKG-INFO:- üöß Semantic guardrail matching (embeddings not yet implemented)
src/guardloop.egg-info/PKG-INFO:# Initialize guardrail
src/guardloop.egg-info/PKG-INFO:# Expected: Should work with basic guardrails
src/guardloop.egg-info/PKG-INFO:# If it fails: Check logs at ~/.guardrail/logs/
src/guardloop.egg-info/PKG-INFO:Intelligently skips guardrails for non-code tasks:
src/guardloop.egg-info/PKG-INFO:# Code task - guardrails applied ‚úÖ
src/guardloop.egg-info/PKG-INFO:# Creative task - guardrails skipped ‚è≠Ô∏è
src/guardloop.egg-info/PKG-INFO:Instant guardrail loading eliminates cold-start latency:
src/guardloop.egg-info/PKG-INFO:pytest --cov=src/guardrail --cov-report=html
src/guardloop.egg-info/PKG-INFO:‚îú‚îÄ‚îÄ src/guardrail/
src/guardloop.egg-info/PKG-INFO:‚îî‚îÄ‚îÄ ~/.guardrail/       # User configuration & data
src/guardloop.egg-info/PKG-INFO:    ‚îú‚îÄ‚îÄ guardrails/     # Static + dynamic rules
src/guardloop/cli/commands.py:      run         Execute single AI request with guardrails
src/guardloop/cli/commands.py:      init        Initialize guardrail configuration
src/guardloop/cli/commands.py:    """Execute AI tool with guardrails"""
src/guardloop/cli/commands.py:                    f"[cyan]Running {tool} with guardrails...", total=None
src/guardloop/cli/commands.py:                        violation.guardrail_type,
src/guardloop/cli/commands.py:    """Initialize guardrail configuration"""
src/guardloop/cli/commands.py:    # Copy guardrail files from package to user directory
src/guardloop/cli/commands.py:    guardrails_path = Path(config.guardrails.base_path)
src/guardloop/cli/commands.py:    console.print(f"üìã Guardrails directory: [cyan]{guardrails_path}[/cyan]")
src/guardloop/cli/commands.py:    # Find package guardrails directory
src/guardloop/cli/commands.py:    source_guardrails = package_dir / "guardrails"
src/guardloop/cli/commands.py:    if source_guardrails.exists():
src/guardloop/cli/commands.py:        # Copy guardrail files if they don't exist
src/guardloop/cli/commands.py:        if not guardrails_path.exists() or not list(guardrails_path.glob("*.md")):
src/guardloop/cli/commands.py:            guardrails_path.mkdir(parents=True, exist_ok=True)
src/guardloop/cli/commands.py:            for md_file in source_guardrails.glob("*.md"):
src/guardloop/cli/commands.py:                dest_file = guardrails_path / md_file.name
src/guardloop/cli/commands.py:            source_agents = source_guardrails / "agents"
src/guardloop/cli/commands.py:                dest_agents = guardrails_path / "agents"
src/guardloop/cli/commands.py:        guardrails_path.mkdir(parents=True, exist_ok=True)
src/guardloop/cli/commands.py:        console.print("   ‚ö†Ô∏è  No template guardrails found in package")
src/guardloop/cli/commands.py:        console.print("   Note: Place your guardrail files in this directory")
src/guardloop/cli/commands.py:    console.print("  1. Review guardrails: [cyan]~/.guardloop/guardrails/[/cyan]")
src/guardloop/cli/commands.py:    """Show guardrail system status"""
src/guardloop/cli/commands.py:    """Start guardrail daemon with background workers"""
src/guardloop/cli/commands.py:    """Interactive guardrail session"""
src/guardloop/cli/commands.py:                if result.guardrails_applied and result.violations:
src/guardloop/cli/commands.py:                            f"   [{v.severity}] {v.guardrail_type}: {v.description}"
src/guardloop/utils/config.py:    timeout: int = 120  # 2 minutes - guardrails add significant context
src/guardloop/utils/config.py:    base_path: str = "~/.guardloop/guardrails"
src/guardloop/utils/config.py:    agents_path: str = "~/.guardloop/guardrails/agents"
src/guardloop/utils/config.py:    v2_adaptive_learning: bool = True  # Enable adaptive guardrail learning
src/guardloop/utils/config.py:    v2_dynamic_guardrails: bool = True  # Load learned guardrails from DB
src/guardloop/utils/config.py:    guardrails: GuardrailsConfig = Field(default_factory=GuardrailsConfig)
src/guardloop/utils/config.py:    guardrail_mode: str = "standard"
src/guardloop/utils/config.py:    guardrail_log_level: str = "INFO"
src/guardloop/utils/config.py:    guardrail_log_file: str = "~/.guardloop/logs/guardloop.log"
src/guardloop/utils/config.py:    guardrail_log_max_size_mb: int = 100
src/guardloop/utils/config.py:    guardrail_log_backup_count: int = 5
src/guardloop/utils/config.py:    guardrail_db_path: str = "~/.guardloop/data/guardloop.db"
src/guardloop/utils/config.py:    guardrail_db_backup_enabled: bool = True
src/guardloop/utils/config.py:    guardrail_db_backup_interval_hours: int = 24
src/guardloop/utils/config.py:    guardrail_claude_path: str = "claude"
src/guardloop/utils/config.py:    guardrail_gemini_path: str = "gemini"
src/guardloop/utils/config.py:    guardrail_codex_path: str = "codex"
src/guardloop/utils/config.py:    guardrail_base_path: str = "~/.guardloop/guardrails"
src/guardloop/utils/config.py:    guardrail_agents_path: str = "~/.guardloop/guardrails/agents"
src/guardloop/utils/config.py:    guardrail_background_analysis: bool = True
src/guardloop/utils/config.py:    guardrail_failure_prediction: bool = False
src/guardloop/utils/config.py:    guardrail_prompt_optimization: bool = False
src/guardloop/utils/config.py:    guardrail_team_sync: bool = False
src/guardloop/utils/config.py:    guardrail_team_enabled: bool = False
src/guardloop/utils/config.py:    guardrail_team_sync_repo: str = ""
src/guardloop/utils/config.py:    guardrail_team_sync_interval_hours: int = 1
src/guardloop/utils/config.py:    guardrail_team_branch: str = "main"
src/guardloop/utils/config.py:    guardrail_timeout_seconds: int = 120  # 2 minutes for AI tools with guardrails
src/guardloop/utils/config.py:    guardrail_max_retries: int = 3
src/guardloop/utils/config.py:    guardrail_cache_size_mb: int = 100
src/guardloop/utils/config.py:    guardrail_debug: bool = False
src/guardloop/utils/config.py:    guardrail_verbose: bool = False
src/guardloop/utils/config.py:    guardrail_dry_run: bool = False
src/guardloop/utils/config.py:            mode=self.settings.guardrail_mode,
src/guardloop/utils/config.py:                    cli_path=self.settings.guardrail_claude_path,
src/guardloop/utils/config.py:                    timeout=self.settings.guardrail_timeout_seconds,
src/guardloop/utils/config.py:                    cli_path=self.settings.guardrail_gemini_path,
src/guardloop/utils/config.py:                    timeout=self.settings.guardrail_timeout_seconds,
src/guardloop/utils/config.py:                    cli_path=self.settings.guardrail_codex_path,
src/guardloop/utils/config.py:                    timeout=self.settings.guardrail_timeout_seconds,
src/guardloop/utils/config.py:            guardrails=GuardrailsConfig(
src/guardloop/utils/config.py:                base_path=self.settings.guardrail_base_path,
src/guardloop/utils/config.py:                agents_path=self.settings.guardrail_agents_path,
src/guardloop/utils/config.py:                path=self.settings.guardrail_db_path,
src/guardloop/utils/config.py:                backup_enabled=self.settings.guardrail_db_backup_enabled,
src/guardloop/utils/config.py:                backup_interval_hours=self.settings.guardrail_db_backup_interval_hours,
src/guardloop/utils/config.py:                level=self.settings.guardrail_log_level,
src/guardloop/utils/config.py:                file=self.settings.guardrail_log_file,
src/guardloop/utils/config.py:                max_size_mb=self.settings.guardrail_log_max_size_mb,
src/guardloop/utils/config.py:                backup_count=self.settings.guardrail_log_backup_count,
src/guardloop/utils/config.py:                background_analysis=self.settings.guardrail_background_analysis,
src/guardloop/utils/config.py:                failure_prediction=self.settings.guardrail_failure_prediction,
src/guardloop/utils/config.py:                prompt_optimization=self.settings.guardrail_prompt_optimization,
src/guardloop/utils/config.py:                team_sync=self.settings.guardrail_team_sync,
src/guardloop/utils/config.py:                enabled=self.settings.guardrail_team_enabled,
src/guardloop/utils/config.py:                sync_repo=self.settings.guardrail_team_sync_repo,
src/guardloop/utils/config.py:                sync_interval_hours=self.settings.guardrail_team_sync_interval_hours,
src/guardloop/utils/config.py:                branch=self.settings.guardrail_team_branch,
src/guardloop/utils/config.py:            self.config.mode = self.settings.guardrail_mode
src/guardloop/utils/config.py:            self.config.tools["claude"].cli_path = self.settings.guardrail_claude_path
src/guardloop/utils/config.py:            self.config.tools["gemini"].cli_path = self.settings.guardrail_gemini_path
src/guardloop/utils/config.py:            self.config.tools["codex"].cli_path = self.settings.guardrail_codex_path
src/guardloop/utils/config.py:            self.config.logging.level = self.settings.guardrail_log_level
src/guardloop/utils/config.py:                self.settings.guardrail_background_analysis
src/guardloop/utils/config.py:        # Create guardrails directory
src/guardloop/utils/config.py:        Path(self.config.guardrails.base_path).mkdir(parents=True, exist_ok=True)
src/guardloop/utils/config.py:        Path(self.config.guardrails.agents_path).mkdir(parents=True, exist_ok=True)
src/guardloop/utils/db.py:    guardrail_type = Column(String(20), nullable=False, index=True)
src/guardloop/utils/db.py:            guardrail_type.in_(["bpsbs", "ai", "ux_ui", "agent"]),
src/guardloop/utils/db.py:            name="check_guardrail_type",
src/guardloop/utils/db.py:    __tablename__ = "guardrail_versions"
src/guardloop/utils/db.py:    dynamic_guardrails = relationship("DynamicGuardrailModel", back_populates="pattern")
src/guardloop/utils/db.py:    """Auto-generated guardrails from learned patterns"""
src/guardloop/utils/db.py:    __tablename__ = "dynamic_guardrails"
src/guardloop/utils/db.py:    pattern = relationship("LearnedPatternModel", back_populates="dynamic_guardrails")
src/guardloop/utils/db.py:        Index("idx_guardrail_status_confidence", "status", "confidence"),
src/guardloop/utils/db.py:    """Track effectiveness of dynamic guardrails"""
src/guardloop/utils/db.py:    rule_id = Column(Integer, ForeignKey("dynamic_guardrails.id"), nullable=False, index=True)
src/guardloop/utils/db.py:    requires_guardrails = Column(Boolean, default=True, index=True)
src/guardloop/utils/db.py:            backup_path = str(self.db_path.parent / f"guardrail_backup_{timestamp}.db")
src/guardloop/agents/debug_hunter.py:        super().__init__("debug_hunter", "~/.guardrail/guardrails/agents/debug-hunter.md")
src/guardloop/agents/documentation.py:        super().__init__("documentation", "~/.guardrail/guardrails/agents/documentation.md")
src/guardloop/agents/tester.py:        super().__init__("tester", "~/.guardrail/guardrails/agents/ruthless-tester.md")
src/guardloop/agents/sre.py:        super().__init__("sre", "~/.guardrail/guardrails/agents/sre.md")
src/guardloop/agents/business_analyst.py:            "~/.guardrail/guardrails/agents/business-analyst.md",
src/guardloop/agents/ux_designer.py:        super().__init__("ux_designer", "~/.guardrail/guardrails/agents/ux-designer.md")
src/guardloop/agents/evaluator.py:        super().__init__("evaluator", "~/.guardrail/guardrails/agents/evaluator.md")
src/guardloop/agents/dba.py:        super().__init__("dba", "~/.guardrail/guardrails/agents/dba.md")
src/guardloop/agents/standards_oracle.py:        super().__init__("standards_oracle", "~/.guardrail/guardrails/agents/standards-oracle.md")
src/guardloop/agents/secops.py:        super().__init__("secops", "~/.guardrail/guardrails/agents/secops.md")
src/guardloop/agents/orchestrator.py:            "orchestrator", "~/.guardrail/guardrails/agents/orchestrator.md"
src/guardloop/agents/architect.py:            "architect", "~/.guardrail/guardrails/agents/cold-blooded-architect.md"
src/guardloop/agents/coder.py:        super().__init__("coder", "~/.guardrail/guardrails/agents/ruthless-coder.md")
src/guardloop/core/validator.py:    """Types of guardrails"""
src/guardloop/core/validator.py:    AI_GUARDRAILS = "ai_guardrails"
src/guardloop/core/validator.py:    """Represents a guardrail violation"""
src/guardloop/core/validator.py:    guardrail_type: str
src/guardloop/core/validator.py:    """Validates AI outputs against guardrail rules"""
src/guardloop/core/validator.py:        """Validate parsed response against all guardrails
src/guardloop/core/validator.py:        violations.extend(await self._check_ai_guardrails(parsed, raw_text))
src/guardloop/core/validator.py:        """Check BPSBS (Best Practices, Security, Business Standards) guardrails
src/guardloop/core/validator.py:                                guardrail_type=GuardrailType.BPSBS.value,
src/guardloop/core/validator.py:                            guardrail_type=GuardrailType.BPSBS.value,
src/guardloop/core/validator.py:                        guardrail_type=GuardrailType.BPSBS.value,
src/guardloop/core/validator.py:    async def _check_ai_guardrails(self, parsed: ParsedResponse, text: str) -> List[Violation]:
src/guardloop/core/validator.py:        """Check AI-specific guardrails
src/guardloop/core/validator.py:                        guardrail_type=GuardrailType.AI_GUARDRAILS.value,
src/guardloop/core/validator.py:        logger.debug("AI guardrails check complete", violations=len(violations))
src/guardloop/core/validator.py:        """Check UX/UI guardrails
src/guardloop/core/validator.py:                            guardrail_type=GuardrailType.UX_UI.value,
src/guardloop/core/validator.py:                                guardrail_type=GuardrailType.UX_UI.value,
src/guardloop/core/validator.py:                        guardrail_type=GuardrailType.UX_UI.value,
src/guardloop/core/validator.py:            return "‚úì No violations found - all guardrails passed!"
src/guardloop/core/validator.py:        report_lines = [f"\n‚ö†Ô∏è  Found {len(violations)} guardrail violation(s):\n"]
src/guardloop/core/validator.py:                    report_lines.append(f"  ‚Ä¢ [{v.guardrail_type}] {v.description}")
src/guardloop/core/smart_selector.py:"""Smart guardrail selection based on task type and token budget"""
src/guardloop/core/smart_selector.py:    """Represents a guardrail file with metadata"""
src/guardloop/core/smart_selector.py:    """Intelligently selects guardrails based on task type and token budget"""
src/guardloop/core/smart_selector.py:    # Task type to guardrail mapping
src/guardloop/core/smart_selector.py:        # Creative/General tasks (minimal guardrails)
src/guardloop/core/smart_selector.py:    def __init__(self, guardrails_path: Path):
src/guardloop/core/smart_selector.py:        """Initialize selector with guardrails directory path
src/guardloop/core/smart_selector.py:            guardrails_path: Path to guardrails directory
src/guardloop/core/smart_selector.py:        self.guardrails_path = guardrails_path
src/guardloop/core/smart_selector.py:        self.guardrail_files = self._load_guardrail_metadata()
src/guardloop/core/smart_selector.py:    def _load_guardrail_metadata(self) -> Dict[str, GuardrailFile]:
src/guardloop/core/smart_selector.py:        """Load metadata for all guardrail files
src/guardloop/core/smart_selector.py:            full_path = self.guardrails_path / filepath
src/guardloop/core/smart_selector.py:        logger.debug("Loaded guardrail metadata", count=len(files))
src/guardloop/core/smart_selector.py:    def select_guardrails(
src/guardloop/core/smart_selector.py:        """Select optimal guardrails based on task and constraints
src/guardloop/core/smart_selector.py:            token_budget: Maximum tokens allowed for guardrails (overridden if model provided)
src/guardloop/core/smart_selector.py:            List of guardrail file paths to load (relative to guardrails_path)
src/guardloop/core/smart_selector.py:            "Starting guardrail selection",
src/guardloop/core/smart_selector.py:        # Step 2: Add task-specific guardrails if task_type provided
src/guardloop/core/smart_selector.py:                        logger.debug("Added task-specific guardrail", file=filepath, tokens=tokens)
src/guardloop/core/smart_selector.py:        for filepath, file_obj in self.guardrail_files.items():
src/guardloop/core/smart_selector.py:                    "Added keyword-matched guardrail",
src/guardloop/core/smart_selector.py:            for filepath, file_obj in self.guardrail_files.items():
src/guardloop/core/smart_selector.py:                        logger.debug("Added core guardrail (strict mode)", file=filepath)
src/guardloop/core/smart_selector.py:        # Step 5: Creative tasks - minimal guardrails
src/guardloop/core/smart_selector.py:            logger.info("Creative task detected - using minimal guardrails")
src/guardloop/core/smart_selector.py:        selected_list = sorted(selected, key=lambda x: self.guardrail_files[x].priority)
src/guardloop/core/smart_selector.py:        """Get total token estimate for given guardrail files
src/guardloop/core/smart_selector.py:            filepaths: List of guardrail file paths
src/guardloop/core/smart_selector.py:        for task_type, guardrails in self.TASK_GUARDRAIL_MAP.items():
src/guardloop/core/smart_selector.py:            for filepath in guardrails:
src/guardloop/core/adaptive_guardrails.py:Generates dynamic guardrails from learned patterns and manages their lifecycle.
src/guardloop/core/adaptive_guardrails.py:    """Generate and manage dynamic guardrails from learned patterns"""
src/guardloop/core/adaptive_guardrails.py:        """Initialize adaptive guardrail generator
src/guardloop/core/adaptive_guardrails.py:            confidence_threshold: Minimum confidence to create guardrail
src/guardloop/core/adaptive_guardrails.py:        """Generate guardrail from learned pattern
src/guardloop/core/adaptive_guardrails.py:            task_types: Task types this guardrail applies to
src/guardloop/core/adaptive_guardrails.py:            Dynamic guardrail model or None if pattern doesn't qualify
src/guardloop/core/adaptive_guardrails.py:        # Check if guardrail already exists for this pattern
src/guardloop/core/adaptive_guardrails.py:        guardrail = DynamicGuardrailModel(
src/guardloop/core/adaptive_guardrails.py:        self.session.add(guardrail)
src/guardloop/core/adaptive_guardrails.py:            "Dynamic guardrail created",
src/guardloop/core/adaptive_guardrails.py:            rule_id=guardrail.id,
src/guardloop/core/adaptive_guardrails.py:            confidence=guardrail.confidence,
src/guardloop/core/adaptive_guardrails.py:        return guardrail
src/guardloop/core/adaptive_guardrails.py:        """Generate guardrails from multiple patterns
src/guardloop/core/adaptive_guardrails.py:            task_types: Task types guardrails apply to
src/guardloop/core/adaptive_guardrails.py:            List of created guardrails
src/guardloop/core/adaptive_guardrails.py:        guardrails = []
src/guardloop/core/adaptive_guardrails.py:            guardrail = self.generate_from_pattern(pattern, task_types)
src/guardloop/core/adaptive_guardrails.py:            if guardrail:
src/guardloop/core/adaptive_guardrails.py:                guardrails.append(guardrail)
src/guardloop/core/adaptive_guardrails.py:            "Batch guardrail generation complete",
src/guardloop/core/adaptive_guardrails.py:            guardrails_created=len(guardrails),
src/guardloop/core/adaptive_guardrails.py:        return guardrails
src/guardloop/core/adaptive_guardrails.py:    def get_active_guardrails(
src/guardloop/core/adaptive_guardrails.py:        """Get active guardrails for context injection with relevance scoring
src/guardloop/core/adaptive_guardrails.py:            List of active guardrails, sorted by relevance
src/guardloop/core/adaptive_guardrails.py:        guardrails = query.all()
src/guardloop/core/adaptive_guardrails.py:        if use_semantic_matching and prompt and guardrails:
src/guardloop/core/adaptive_guardrails.py:            # Index guardrails
src/guardloop/core/adaptive_guardrails.py:            loop.run_until_complete(matcher.index_guardrails(guardrails))
src/guardloop/core/adaptive_guardrails.py:                    guardrails=guardrails,
src/guardloop/core/adaptive_guardrails.py:            for guardrail, similarity in relevant_pairs:
src/guardloop/core/adaptive_guardrails.py:                if not guardrail.rule_metadata:
src/guardloop/core/adaptive_guardrails.py:                    guardrail.rule_metadata = {}
src/guardloop/core/adaptive_guardrails.py:                guardrail.rule_metadata["semantic_similarity"] = similarity
src/guardloop/core/adaptive_guardrails.py:            # Return only semantically matched guardrails
src/guardloop/core/adaptive_guardrails.py:            guardrails = [g for g, _ in relevant_pairs]
src/guardloop/core/adaptive_guardrails.py:                matched_count=len(guardrails),
src/guardloop/core/adaptive_guardrails.py:        elif prompt and guardrails:
src/guardloop/core/adaptive_guardrails.py:            guardrails = self._score_by_relevance(guardrails, prompt, task_type)
src/guardloop/core/adaptive_guardrails.py:            guardrails.sort(key=lambda gr: self._calculate_priority_score(gr, task_type), reverse=True)
src/guardloop/core/adaptive_guardrails.py:            guardrails = guardrails[:max_rules]
src/guardloop/core/adaptive_guardrails.py:            "Retrieved active guardrails",
src/guardloop/core/adaptive_guardrails.py:            count=len(guardrails),
src/guardloop/core/adaptive_guardrails.py:        return guardrails
src/guardloop/core/adaptive_guardrails.py:    def format_for_context(self, guardrails: List[DynamicGuardrailModel]) -> str:
src/guardloop/core/adaptive_guardrails.py:        """Format guardrails for LLM context injection
src/guardloop/core/adaptive_guardrails.py:            guardrails: List of guardrails
src/guardloop/core/adaptive_guardrails.py:        if not guardrails:
src/guardloop/core/adaptive_guardrails.py:        for gr in guardrails:
src/guardloop/core/adaptive_guardrails.py:        guardrails: List[DynamicGuardrailModel],
src/guardloop/core/adaptive_guardrails.py:        """Score guardrails by relevance to prompt
src/guardloop/core/adaptive_guardrails.py:            guardrails: List of guardrails to score
src/guardloop/core/adaptive_guardrails.py:        for gr in guardrails:
src/guardloop/core/adaptive_guardrails.py:        return guardrails
src/guardloop/core/adaptive_guardrails.py:        self, guardrail: DynamicGuardrailModel, task_type: Optional[str] = None
src/guardloop/core/adaptive_guardrails.py:        """Calculate priority score for guardrail
src/guardloop/core/adaptive_guardrails.py:            guardrail: Guardrail to score
src/guardloop/core/adaptive_guardrails.py:        if guardrail.rule_metadata and "relevance_score" in guardrail.rule_metadata:
src/guardloop/core/adaptive_guardrails.py:            score += guardrail.rule_metadata["relevance_score"] * 2.0
src/guardloop/core/adaptive_guardrails.py:        score += guardrail.confidence * 2.0
src/guardloop/core/adaptive_guardrails.py:        if guardrail.activated_at:
src/guardloop/core/adaptive_guardrails.py:            days_since_activation = (datetime.utcnow() - guardrail.activated_at).days
src/guardloop/core/adaptive_guardrails.py:            .filter(RuleEffectivenessModel.rule_id == guardrail.id)
src/guardloop/core/adaptive_guardrails.py:        if task_type and guardrail.task_types and task_type in guardrail.task_types:
src/guardloop/core/adaptive_guardrails.py:        score += enforcement_weights.get(guardrail.enforcement_mode, 0.0)
src/guardloop/core/pattern_analyzer.py:        self, days: int = 30, guardrail_types: Optional[List[str]] = None
src/guardloop/core/pattern_analyzer.py:            guardrail_types: Specific guardrail types to analyze
src/guardloop/core/pattern_analyzer.py:        if guardrail_types:
src/guardloop/core/pattern_analyzer.py:            query = query.filter(ViolationModel.guardrail_type.in_(guardrail_types))
src/guardloop/core/pattern_analyzer.py:            types=guardrail_types,
src/guardloop/core/pattern_analyzer.py:            key = (violation.guardrail_type, violation.rule_violated)
src/guardloop/core/pattern_analyzer.py:                        "guardrail_type": gtype,
src/guardloop/core/context_manager.py:"""Context Manager for building enhanced prompts with guardrails"""
src/guardloop/core/context_manager.py:    """Cache for guardrail content with TTL"""
src/guardloop/core/context_manager.py:    """Manages context building with guardrails for AI prompts"""
src/guardloop/core/context_manager.py:        self.guardrails_path = Path(self.config.guardrails.base_path).expanduser()
src/guardloop/core/context_manager.py:        self.agents_path = Path(self.config.guardrails.agents_path).expanduser()
src/guardloop/core/context_manager.py:        self.smart_selector = SmartGuardrailSelector(self.guardrails_path)
src/guardloop/core/context_manager.py:            guardrails_path=str(self.guardrails_path),
src/guardloop/core/context_manager.py:    def load_guardrails(
src/guardloop/core/context_manager.py:        """Load relevant guardrails based on agent, mode, and prompt content
src/guardloop/core/context_manager.py:            db_session: Database session for loading dynamic guardrails (v2)
src/guardloop/core/context_manager.py:            Combined guardrail content as string
src/guardloop/core/context_manager.py:        cache_key = f"guardrails_{agent}_{mode}_{task_type or 'none'}"
src/guardloop/core/context_manager.py:        logger.info("Loading guardrails", agent=agent, mode=mode, task_type=task_type)
src/guardloop/core/context_manager.py:        guardrails_content = []
src/guardloop/core/context_manager.py:        # Use smart selector to choose optimal guardrails
src/guardloop/core/context_manager.py:        # Select guardrails with token budget (5K for guardrails only)
src/guardloop/core/context_manager.py:        selected_files = self.smart_selector.select_guardrails(
src/guardloop/core/context_manager.py:        # Load selected core and specialized guardrail files
src/guardloop/core/context_manager.py:            full_path = self.guardrails_path / filepath
src/guardloop/core/context_manager.py:                guardrails_content.append(f"# {filepath}\n\n{content}")
src/guardloop/core/context_manager.py:        # v2: Load dynamic (learned) guardrails from DB
src/guardloop/core/context_manager.py:                from guardloop.core.adaptive_guardrails import AdaptiveGuardrailGenerator
src/guardloop/core/context_manager.py:                dynamic_guardrails = adaptive_gen.get_active_guardrails(
src/guardloop/core/context_manager.py:                if dynamic_guardrails:
src/guardloop/core/context_manager.py:                    dynamic_text = adaptive_gen.format_for_context(dynamic_guardrails)
src/guardloop/core/context_manager.py:                    guardrails_content.append(dynamic_text)
src/guardloop/core/context_manager.py:                        "Dynamic guardrails loaded",
src/guardloop/core/context_manager.py:                        count=len(dynamic_guardrails),
src/guardloop/core/context_manager.py:                logger.warning("Failed to load dynamic guardrails", error=str(e))
src/guardloop/core/context_manager.py:                guardrails_content.append(
src/guardloop/core/context_manager.py:        combined = "\n\n---\n\n".join(guardrails_content)
src/guardloop/core/context_manager.py:        """Build complete context with guardrails and user prompt
src/guardloop/core/context_manager.py:            db_session: Database session for dynamic guardrails (v2)
src/guardloop/core/context_manager.py:            Complete enhanced prompt with guardrails
src/guardloop/core/context_manager.py:        guardrails = self.load_guardrails(
src/guardloop/core/context_manager.py:            "<guardrails>",
src/guardloop/core/context_manager.py:            guardrails,
src/guardloop/core/context_manager.py:            "</guardrails>",
src/guardloop/core/context_manager.py:    # _select_relevant_guardrails() ‚Üí smart_selector.select_guardrails()
src/guardloop/core/context_manager.py:    # _extract_key_points() ‚Üí no longer needed (guardrails pre-optimized)
src/guardloop/core/context_manager.py:            logger.debug("Loaded guardrail file", file_path=str(file_path), size=len(content))
src/guardloop/core/context_manager.py:                "Error loading guardrail file", file_path=str(file_path), error=str(e)
src/guardloop/core/context_manager.py:- All guardrail violations must be addressed before approval
src/guardloop/core/context_manager.py:- Full compliance with BPSBS, AI, and UX/UI guardrails
src/guardloop/core/context_manager.py:- Follow guardrails as guidance
src/guardloop/core/context_manager.py:        logger.info("Refreshing guardrail cache")
src/guardloop/core/context_manager.py:    def get_guardrail_files_status(self) -> Dict[str, bool]:
src/guardloop/core/context_manager.py:        """Check which guardrail files exist
src/guardloop/core/context_manager.py:        # Check core guardrail files
src/guardloop/core/context_manager.py:        for filename in self.config.guardrails.files:
src/guardloop/core/context_manager.py:            file_path = self.guardrails_path / filename
src/guardloop/core/context_manager.py:        file_status = self.get_guardrail_files_status()
src/guardloop/core/context_manager.py:            "total_guardrail_files": total_files,
src/guardloop/core/context_manager.py:            "existing_guardrail_files": existing_files,
src/guardloop/core/context_manager.py:            "missing_guardrail_files": total_files - existing_files,
src/guardloop/core/context_manager.py:            "guardrails_path": str(self.guardrails_path),
src/guardloop/core/failure_detector.py:            "suggestion": "Apply UX/UI guardrails for better user experience.",
src/guardloop/core/workers.py:                output_path = Path("~/.guardrail/AI_Failure_Modes.md").expanduser()
src/guardloop/core/workers.py:        log_dir = Path("~/.guardrail/logs").expanduser()
src/guardloop/core/task_classifier.py:Classifies prompts into task types to determine whether guardrails should be applied.
src/guardloop/core/task_classifier.py:    requires_guardrails: bool
src/guardloop/core/task_classifier.py:    """Classify user prompts to determine task type and guardrail requirements"""
src/guardloop/core/task_classifier.py:            TaskClassification with type, confidence, and guardrail requirement
src/guardloop/core/task_classifier.py:        task_type, confidence, requires_guardrails, reasoning = self._determine_type(
src/guardloop/core/task_classifier.py:            requires_guardrails=requires_guardrails,
src/guardloop/core/task_classifier.py:            requires_guardrails=requires_guardrails,
src/guardloop/core/task_classifier.py:            Tuple of (task_type, confidence, requires_guardrails, reasoning)
src/guardloop/core/task_classifier.py:                f"High code score ({code_score:.2f}), guardrails required",
src/guardloop/core/task_classifier.py:        # Check for creative tasks (skip guardrails)
src/guardloop/core/task_classifier.py:                f"Creative task detected ({creative_score:.2f}), skipping guardrails",
src/guardloop/core/task_classifier.py:        # Check for content tasks (skip guardrails)
src/guardloop/core/task_classifier.py:                f"Content task detected ({content_score:.2f}), skipping guardrails",
src/guardloop/core/task_classifier.py:                True,  # Apply guardrails when uncertain
src/guardloop/core/task_classifier.py:                f"Mixed task type (code: {code_score:.2f}, creative: {creative_score:.2f}, content: {content_score:.2f}), applying guardrails",
src/guardloop/core/task_classifier.py:        # Unknown - default to requiring guardrails (safe default)
src/guardloop/core/task_classifier.py:            "Task type unclear, applying guardrails as safety measure",
src/guardloop/core/task_classifier.py:    def should_apply_guardrails(self, classification: TaskClassification) -> bool:
src/guardloop/core/task_classifier.py:        """Determine if guardrails should be applied
src/guardloop/core/task_classifier.py:            True if guardrails should be applied
src/guardloop/core/task_classifier.py:        return classification.requires_guardrails
src/guardloop/core/budget_manager.py:        "core": 0.3,  # 30% for core guardrails (always applicable)
src/guardloop/core/budget_manager.py:        "specialized": 0.2,  # 20% for task-specific guardrails
src/guardloop/core/budget_manager.py:        """Allocate total budget across guardrail categories.
src/guardloop/core/daemon.py:from guardloop.core.adaptive_guardrails import AdaptiveGuardrailGenerator
src/guardloop/core/daemon.py:    guardrails_applied: bool = True  # v2: Whether guardrails were applied
src/guardloop/core/daemon.py:        self.adaptive_guardrails = AdaptiveGuardrailGenerator(db_session)
src/guardloop/core/daemon.py:        # Pre-warm cache with commonly used guardrails
src/guardloop/core/daemon.py:            guardrails_required = True
src/guardloop/core/daemon.py:                guardrails_required = task_classification.requires_guardrails
src/guardloop/core/daemon.py:                    guardrails_required=guardrails_required,
src/guardloop/core/daemon.py:            # 1. Load and inject guardrails (skip if not required)
src/guardloop/core/daemon.py:            if guardrails_required:
src/guardloop/core/daemon.py:                # Skip guardrails for creative/content tasks
src/guardloop/core/daemon.py:                    "‚ú® Creative task detected - bypassing guardrails for direct execution",
src/guardloop/core/daemon.py:                guardrails_applied=guardrails_required,
src/guardloop/core/daemon.py:            # 4. Validate against guardrails
src/guardloop/core/daemon.py:                violations=violations if guardrails_required else [],
src/guardloop/core/daemon.py:                guardrails_applied=guardrails_required,
src/guardloop/core/daemon.py:            violations: List of guardrail violations
src/guardloop/core/daemon.py:                    type=violation.guardrail_type,
src/guardloop/core/daemon.py:        """Pre-warm cache with commonly used guardrails to eliminate cold-start latency.
src/guardloop/core/daemon.py:        Loads frequently accessed guardrails into cache during initialization
src/guardloop/core/daemon.py:                    self.context_manager.load_guardrails(
src/guardloop/core/daemon.py:                        "Failed to pre-warm guardrail",
src/guardloop/core/daemon.py:                    self.context_manager.load_guardrails(
src/guardloop/core/semantic_matcher.py:"""Semantic similarity for guardrail matching using embeddings."""
src/guardloop/core/semantic_matcher.py:    """Use embeddings to match guardrails to prompts with semantic similarity."""
src/guardloop/core/semantic_matcher.py:        self.guardrail_embeddings = {}
src/guardloop/core/semantic_matcher.py:    async def index_guardrails(self, guardrails: List[any]) -> None:
src/guardloop/core/semantic_matcher.py:        """Pre-compute embeddings for all guardrails.
src/guardloop/core/semantic_matcher.py:            guardrails: List of DynamicGuardrailModel instances
src/guardloop/core/semantic_matcher.py:        if not guardrails:
src/guardloop/core/semantic_matcher.py:            logger.warning("No guardrails to index")
src/guardloop/core/semantic_matcher.py:        texts = [g.rule_text for g in guardrails]
src/guardloop/core/semantic_matcher.py:        # Batch encode all guardrails
src/guardloop/core/semantic_matcher.py:        # Store embeddings with guardrail IDs
src/guardloop/core/semantic_matcher.py:        for guardrail, embedding in zip(guardrails, embeddings):
src/guardloop/core/semantic_matcher.py:            self.guardrail_embeddings[guardrail.id] = embedding
src/guardloop/core/semantic_matcher.py:            count=len(guardrails),
src/guardloop/core/semantic_matcher.py:        guardrails: List[any],
src/guardloop/core/semantic_matcher.py:        """Find most relevant guardrails using semantic similarity.
src/guardloop/core/semantic_matcher.py:            guardrails: List of DynamicGuardrailModel instances
src/guardloop/core/semantic_matcher.py:            List of (guardrail, similarity_score) tuples sorted by relevance
src/guardloop/core/semantic_matcher.py:        if not guardrails:
src/guardloop/core/semantic_matcher.py:            logger.warning("No guardrails provided for matching")
src/guardloop/core/semantic_matcher.py:        for guardrail in guardrails:
src/guardloop/core/semantic_matcher.py:            # Get or compute guardrail embedding
src/guardloop/core/semantic_matcher.py:            if guardrail.id not in self.guardrail_embeddings:
src/guardloop/core/semantic_matcher.py:                    [guardrail.rule_text], show_progress_bar=False
src/guardloop/core/semantic_matcher.py:                self.guardrail_embeddings[guardrail.id] = g_embedding
src/guardloop/core/semantic_matcher.py:                g_embedding = self.guardrail_embeddings[guardrail.id]
src/guardloop/core/semantic_matcher.py:                scores.append((guardrail, float(similarity)))
src/guardloop/core/semantic_matcher.py:            candidates=len(guardrails),
src/guardloop/core/semantic_matcher.py:        count = len(self.guardrail_embeddings)
src/guardloop/core/semantic_matcher.py:        self.guardrail_embeddings.clear()
src/guardloop/core/semantic_matcher.py:            "cached_embeddings": len(self.guardrail_embeddings),
test_local.py:from guardrail.core.daemon import GuardrailDaemon, AIRequest
test_local.py:from guardrail.core.parser import ResponseParser
test_local.py:from guardrail.core.validator import GuardrailValidator
test_local.py:from guardrail.utils.config import Config, DatabaseConfig, LoggingConfig
test_local.py:from guardrail.adapters.base import AIResponse
test_local.py:    """Test guardrail validator"""
test_local.py:        from guardrail.cli.commands import cli
test_local.py:        from guardrail.agents.orchestrator import OrchestratorAgent
test_local.py:        from guardrail.agents.coder import CoderAgent
test_local.py:        from guardrail.agents.secops import SecOpsAgent
test_local.py:        from guardrail.adapters.claude import ClaudeAdapter
test_local.py:        from guardrail.adapters.gemini import GeminiAdapter
test_local.py:        from guardrail.adapters.codex import CodexAdapter
test_prewarm.py:from guardrail.utils.config import get_config
test_prewarm.py:from guardrail.core.daemon import GuardrailDaemon
tests/test_utils/test_config.py:        assert db_config.path == Path.home() / ".guardrail" / "guardrail.db"
tests/test_utils/test_config.py:        log_config = LoggingConfig(file="/var/log/guardrail.log")
tests/test_utils/test_config.py:        assert log_config.file == Path("/var/log/guardrail.log")
tests/test_utils/test_config.py:    """Test guardrails configuration"""
tests/test_utils/test_config.py:    def test_default_guardrails_config(self):
tests/test_utils/test_config.py:        """Test default guardrails configuration"""
tests/test_utils/test_config.py:        guardrails_config = GuardrailsConfig()
tests/test_utils/test_config.py:        assert guardrails_config.base_path == Path.home() / ".guardrail" / "guardrails"
tests/test_utils/test_config.py:        assert guardrails_config.agents_path == Path.home() / ".guardrail" / "guardrails" / "agents"
tests/test_utils/test_config.py:        """Test custom guardrails paths"""
tests/test_utils/test_config.py:        guardrails_config = GuardrailsConfig(
tests/test_utils/test_config.py:            base_path="/custom/guardrails",
tests/test_utils/test_config.py:        assert guardrails_config.base_path == Path("/custom/guardrails")
tests/test_utils/test_config.py:        assert guardrails_config.agents_path == Path("/custom/agents")
tests/test_utils/test_config.py:            sync_repo="git@github.com:org/guardrails.git",
tests/test_utils/test_config.py:        assert team_config.sync_repo == "git@github.com:org/guardrails.git"
tests/test_utils/test_config.py:    def test_guardrails_configuration(self):
tests/test_utils/test_config.py:        """Test guardrails configuration"""
tests/test_utils/test_config.py:            guardrails=GuardrailsConfig(
tests/test_utils/test_config.py:                base_path="/custom/guardrails"
tests/test_utils/test_config.py:        assert config.guardrails.base_path == Path("/custom/guardrails")
tests/test_utils/test_config.py:                sync_repo="git@github.com:org/guardrails.git"
tests/test_utils/test_config.py:        assert config.team.sync_repo == "git@github.com:org/guardrails.git"
tests/test_utils/test_config.py:            logging=LoggingConfig(level="DEBUG", file="/tmp/guardrail.log")
tests/test_utils/test_config.py:        assert config.logging.file == Path("/tmp/guardrail.log")
tests/test_utils/test_config.py:  file: /tmp/guardrail.log
tests/test_smart_selector.py:    """Create selector with test guardrails path"""
tests/test_smart_selector.py:    guardrails_path = Path.home() / ".guardrail" / "guardrails"
tests/test_smart_selector.py:    return SmartGuardrailSelector(guardrails_path)
tests/test_smart_selector.py:    """Test guardrail selection logic"""
tests/test_smart_selector.py:        selected = selector.select_guardrails(prompt="Do something")
tests/test_smart_selector.py:        selected = selector.select_guardrails(
tests/test_smart_selector.py:        selected = selector.select_guardrails(
tests/test_smart_selector.py:        selected = selector.select_guardrails(prompt=prompt)
tests/test_smart_selector.py:        # Should include API, auth, and database guardrails
tests/test_smart_selector.py:    def test_creative_mode_minimal_guardrails(self, selector):
tests/test_smart_selector.py:        selected = selector.select_guardrails(prompt=prompt)
tests/test_smart_selector.py:        selected = selector.select_guardrails(
tests/test_smart_selector.py:        selected = selector.select_guardrails(
tests/test_smart_selector.py:        # Generous budget - should include multiple guardrails
tests/test_smart_selector.py:        selected = selector.select_guardrails(
tests/test_smart_selector.py:        selected = selector.select_guardrails(
tests/test_smart_selector.py:        selected = selector.select_guardrails(prompt="")
tests/test_smart_selector.py:        selected = selector.select_guardrails(
tests/test_smart_selector.py:        # Even with 0 budget, should include minimal guardrails
tests/test_smart_selector.py:        selected = selector.select_guardrails(prompt="Do something", token_budget=0)
tests/test_cli/test_commands.py:    """Test 'guardrail run' command"""
tests/test_cli/test_commands.py:        with patch("guardrail.cli.commands.GuardrailDaemon") as mock:
tests/test_cli/test_commands.py:        with patch("guardrail.cli.commands.get_config") as mock:
tests/test_cli/test_commands.py:        assert "Execute AI tool with guardrails" in result.output
tests/test_cli/test_commands.py:    """Test 'guardrail init' command"""
tests/test_cli/test_commands.py:        assert "Initialize guardrail configuration" in result.output
tests/test_cli/test_commands.py:            with patch("guardrail.cli.commands.ConfigManager") as mock_config:
tests/test_cli/test_commands.py:                with patch("guardrail.cli.commands.DatabaseManager") as mock_db:
tests/test_cli/test_commands.py:                    mock_config_instance.config_path = Path("~/.guardrail/config.yaml")
tests/test_cli/test_commands.py:    """Test 'guardrail status' command"""
tests/test_cli/test_commands.py:        assert "Show guardrail system status" in result.output
tests/test_cli/test_commands.py:        with patch("guardrail.cli.commands.get_config") as mock_config:
tests/test_cli/test_commands.py:            with patch("guardrail.cli.commands.DatabaseManager") as mock_db:
tests/test_cli/test_commands.py:    """Test 'guardrail config' command"""
tests/test_cli/test_commands.py:        with patch("guardrail.cli.commands.ConfigManager") as mock_config:
tests/test_cli/test_commands.py:            mock_config_instance.config_path = Path("~/.guardrail/config.yaml")
tests/test_cli/test_commands.py:    """Test 'guardrail analyze' command"""
tests/test_cli/test_commands.py:        with patch("guardrail.cli.commands.get_config") as mock_config:
tests/test_cli/test_commands.py:            with patch("guardrail.cli.commands.DatabaseManager") as mock_db:
tests/test_cli/test_commands.py:        with patch("guardrail.cli.commands.get_config") as mock_config:
tests/test_cli/test_commands.py:            with patch("guardrail.cli.commands.DatabaseManager") as mock_db:
tests/test_cli/test_commands.py:    """Test 'guardrail export' command"""
tests/test_cli/test_commands.py:            with patch("guardrail.cli.commands.get_config") as mock_config:
tests/test_cli/test_commands.py:                with patch("guardrail.cli.commands.DatabaseManager") as mock_db:
tests/test_cli/test_commands.py:            with patch("guardrail.cli.commands.get_config") as mock_config:
tests/test_cli/test_commands.py:                with patch("guardrail.cli.commands.DatabaseManager") as mock_db:
tests/test_cli/test_commands.py:    """Test 'guardrail daemon' command"""
tests/test_cli/test_commands.py:        assert "Start guardrail daemon" in result.output
tests/test_cli/test_commands.py:    """Test 'guardrail interactive' command"""
tests/test_cli/test_commands.py:        assert "Interactive guardrail session" in result.output
tests/conftest.py:"""Shared test fixtures for guardrail tests"""
tests/conftest.py:            guardrail_type="security",
tests/conftest.py:            guardrail_type="standards",
tests/conftest.py:def temp_guardrail_dir(tmp_path):
tests/conftest.py:    """Temporary guardrail directory for tests"""
tests/conftest.py:    guardrail_dir = tmp_path / ".guardrail"
tests/conftest.py:    guardrail_dir.mkdir()
tests/conftest.py:    (guardrail_dir / "guardrails").mkdir()
tests/conftest.py:    (guardrail_dir / "guardrails" / "agents").mkdir()
tests/conftest.py:    (guardrail_dir / "logs").mkdir()
tests/conftest.py:    return guardrail_dir
tests/conftest.py:def sample_guardrail_files(temp_guardrail_dir):
tests/conftest.py:    """Sample guardrail markdown files"""
tests/conftest.py:    # BPSBS guardrail
tests/conftest.py:    bpsbs_file = temp_guardrail_dir / "guardrails" / "bpsbs.md"
tests/conftest.py:    # Security guardrail
tests/conftest.py:    security_file = temp_guardrail_dir / "guardrails" / "security.md"
tests/conftest.py:def sample_agent_instructions(temp_guardrail_dir):
tests/conftest.py:    agents_dir = temp_guardrail_dir / "guardrails" / "agents"
tests/test_semantic_matcher.py:    def mock_guardrails(self):
tests/test_semantic_matcher.py:        """Create mock guardrails for testing"""
tests/test_semantic_matcher.py:        guardrail1 = Mock()
tests/test_semantic_matcher.py:        guardrail1.id = 1
tests/test_semantic_matcher.py:        guardrail1.rule_text = "Always validate user input for SQL injection"
tests/test_semantic_matcher.py:        guardrail2 = Mock()
tests/test_semantic_matcher.py:        guardrail2.id = 2
tests/test_semantic_matcher.py:        guardrail2.rule_text = "Ensure authentication before database access"
tests/test_semantic_matcher.py:        guardrail3 = Mock()
tests/test_semantic_matcher.py:        guardrail3.id = 3
tests/test_semantic_matcher.py:        guardrail3.rule_text = "Use parameterized queries to prevent injection"
tests/test_semantic_matcher.py:        return [guardrail1, guardrail2, guardrail3]
tests/test_semantic_matcher.py:        assert matcher.guardrail_embeddings == {}
tests/test_semantic_matcher.py:    @patch("guardrail.core.semantic_matcher.SentenceTransformer")
tests/test_semantic_matcher.py:    @patch("guardrail.core.semantic_matcher.SentenceTransformer")
tests/test_semantic_matcher.py:    @patch("guardrail.core.semantic_matcher.SentenceTransformer")
tests/test_semantic_matcher.py:    async def test_index_guardrails(self, mock_transformer, matcher, mock_guardrails):
tests/test_semantic_matcher.py:        """Test guardrail indexing"""
tests/test_semantic_matcher.py:        await matcher.index_guardrails(mock_guardrails)
tests/test_semantic_matcher.py:        assert len(matcher.guardrail_embeddings) == 3
tests/test_semantic_matcher.py:        assert 1 in matcher.guardrail_embeddings
tests/test_semantic_matcher.py:        assert 2 in matcher.guardrail_embeddings
tests/test_semantic_matcher.py:        assert 3 in matcher.guardrail_embeddings
tests/test_semantic_matcher.py:    @patch("guardrail.core.semantic_matcher.SentenceTransformer")
tests/test_semantic_matcher.py:    async def test_find_relevant(self, mock_transformer, matcher, mock_guardrails):
tests/test_semantic_matcher.py:        guardrail_embs = np.array([[0.9, 0.1], [0.5, 0.5], [0.8, 0.2]])
tests/test_semantic_matcher.py:            return guardrail_embs
tests/test_semantic_matcher.py:        # Index guardrails first
tests/test_semantic_matcher.py:        await matcher.index_guardrails(mock_guardrails)
tests/test_semantic_matcher.py:            guardrails=mock_guardrails,
tests/test_semantic_matcher.py:    async def test_find_relevant_empty_guardrails(self, matcher):
tests/test_semantic_matcher.py:        """Test find_relevant with empty guardrails"""
tests/test_semantic_matcher.py:            prompt="test prompt", guardrails=[], top_k=5, threshold=0.3
tests/test_semantic_matcher.py:    @patch("guardrail.core.semantic_matcher.SentenceTransformer")
tests/test_semantic_matcher.py:        self, mock_transformer, matcher, mock_guardrails
tests/test_semantic_matcher.py:        )  # Very different from guardrails
tests/test_semantic_matcher.py:        matcher.guardrail_embeddings = {
tests/test_semantic_matcher.py:            guardrails=mock_guardrails,
tests/test_semantic_matcher.py:        matcher.guardrail_embeddings = {1: np.array([1, 2]), 2: np.array([3, 4])}
tests/test_semantic_matcher.py:        assert len(matcher.guardrail_embeddings) == 0
tests/test_semantic_matcher.py:        matcher.guardrail_embeddings = {1: np.array([1, 2]), 2: np.array([3, 4])}
tests/performance/__init__.py:"""Performance tests for guardrail optimization."""
tests/performance/test_optimization.py:    config.guardrails = Mock(
tests/performance/test_optimization.py:        base_path="~/.guardrail/guardrails",
tests/performance/test_optimization.py:        agents_path="~/.guardrail/guardrails/agents",
tests/performance/test_optimization.py:        # Simulate old system: load all guardrails (legacy behavior)
tests/performance/test_optimization.py:        old_guardrails = [
tests/performance/test_optimization.py:        old_context = "\n\n".join(old_guardrails)
tests/performance/test_optimization.py:        # Old system would have ~24K tokens (all guardrails)
tests/performance/test_optimization.py:        # Creative task should skip guardrails
tests/performance/test_optimization.py:        # Creative tasks bypass guardrails
tests/performance/test_optimization.py:    async def test_creative_tasks_skip_guardrails(self):
tests/performance/test_optimization.py:        """Verify creative tasks bypass guardrail validation."""
tests/performance/test_optimization.py:            # Should not require guardrails
tests/performance/test_optimization.py:                classification.requires_guardrails is False
tests/performance/test_optimization.py:            ), f"Creative task requires guardrails: {prompt}"
tests/performance/test_optimization.py:                f"\n‚úì '{prompt[:40]}...' ‚Üí {classification.task_type} (skip guardrails)"
tests/performance/test_optimization.py:    async def test_code_tasks_require_guardrails(self):
tests/performance/test_optimization.py:        """Verify code tasks still get guardrails."""
tests/performance/test_optimization.py:            # Should require guardrails
tests/performance/test_optimization.py:                classification.requires_guardrails is True
tests/performance/test_optimization.py:            ), f"Code task doesn't require guardrails: {prompt}"
tests/performance/test_optimization.py:                f"\n‚úì '{prompt[:40]}...' ‚Üí {classification.task_type} (apply guardrails)"
tests/performance/test_optimization.py:        # Mock guardrails
tests/performance/test_optimization.py:        guardrails = []
tests/performance/test_optimization.py:            guardrails.append(g)
tests/performance/test_optimization.py:        # Index guardrails
tests/performance/test_optimization.py:        await matcher.index_guardrails(guardrails)
tests/performance/test_optimization.py:            guardrails=guardrails,
tests/performance/test_optimization.py:        print(f"Indexing 100 guardrails: {index_time*1000:.1f}ms")
tests/test_agents/test_agents.py:                guardrail_type="security",
tests/test_core/test_validator.py:    async def test_ai_guardrails_checks(self, validator_standard):
tests/test_core/test_validator.py:        """Test AI guardrails"""
tests/test_core/test_validator.py:        violations_incomplete = await validator_standard._check_ai_guardrails(parsed, text_incomplete)
tests/test_core/test_validator.py:        violations_complete = await validator_standard._check_ai_guardrails(parsed, text_complete)
tests/test_core/test_validator.py:        """Test UX/UI guardrails"""
tests/test_core/test_validator.py:        text = "Code without proper guardrails"
tests/test_core/test_validator.py:                guardrail_type="bpsbs",
tests/test_core/test_validator.py:        assert "2 guardrail violation(s)" in report
tests/test_core/test_validator.py:            guardrail_type=GuardrailType.BPSBS.value,
tests/test_core/test_validator.py:        assert v.guardrail_type == "bpsbs"
tests/test_core/test_daemon.py:        with patch("guardrail.core.daemon.DatabaseManager"):
tests/test_core/test_daemon.py:        with patch("guardrail.core.daemon.AdapterFactory.get_adapter") as mock_factory:
tests/test_core/test_daemon.py:            return_value="<guardrails>Test</guardrails>\n\nTest prompt"
tests/test_core/test_daemon.py:                guardrail_type="bpsbs",
tests/test_core/test_daemon.py:                guardrail_type="bpsbs",
tests/test_core/test_daemon.py:        with patch("guardrail.core.daemon.DatabaseManager"):
tests/test_core/test_daemon.py:                return_value="<guardrails>...</guardrails>\n\nCreate function"
tests/test_core/test_context_manager.py:        assert cm.guardrails_path.exists() or True  # May not exist in test environment
tests/test_core/test_context_manager.py:        # Mock guardrail loading to return empty string
tests/test_core/test_context_manager.py:        cm.load_guardrails = lambda agent=None, mode="standard": "# Test Guardrails"
tests/test_core/test_context_manager.py:        assert "<guardrails>" in context
tests/test_core/test_context_manager.py:        assert "</guardrails>" in context
tests/test_core/test_context_manager.py:        assert "guardrails_path" in stats
tests/test_core/test_context_manager.py:        cm.load_guardrails(agent="architect", mode="standard")
tests/test_core/test_context_manager.py:        cm.load_guardrails(agent="architect", mode="standard")
tests/test_integration.py:"""Integration tests for complete guardrail workflow"""
tests/test_integration.py:    with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
tests/test_integration.py:        # Verify guardrails were injected
tests/test_integration.py:        assert "BPSBS" in call_args[0][0] or "guardrail" in call_args[0][0].lower()
tests/test_integration.py:    with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
tests/test_integration.py:    with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
tests/test_integration.py:    with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
tests/test_integration.py:async def test_guardrail_injection(config, tmp_path):
tests/test_integration.py:    """Test guardrail markdown injection into prompts"""
tests/test_integration.py:    # Create test guardrail file
tests/test_integration.py:    guardrail_dir = tmp_path / ".guardrail" / "guardrails"
tests/test_integration.py:    guardrail_dir.mkdir(parents=True)
tests/test_integration.py:    test_guardrail = guardrail_dir / "test-guardrail.md"
tests/test_integration.py:    test_guardrail.write_text("""
tests/test_integration.py:    config.agents.base_path = guardrail_dir.parent
tests/test_integration.py:    with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
tests/test_integration.py:        # Verify guardrail was injected
tests/test_integration.py:        assert "error handling" in call_args.lower() or "guardrail" in call_args.lower()
tests/test_integration.py:    with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
tests/test_integration.py:    with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
tests/test_integration.py:        adapter_class = f"guardrail.adapters.{tool}.{tool.capitalize()}Adapter"
tests/test_integration.py:    with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
tests/test_integration.py:        with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
tests/test_integration.py:    with patch("guardrail.adapters.claude.ClaudeAdapter.execute") as mock_execute:
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:Keywords: ai,llm,guardrails,claude,gemini,codex,governance
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:> An experimental system that learns from LLM failures and generates adaptive guardrails.
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:3. üß† **Learn** and generate dynamic guardrails
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:- ‚úÖ Dynamic guardrail generation from failures
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:- ‚úÖ Task classification (skip guardrails for creative work)
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:- ‚úÖ Pre-warm cache for instant guardrail loading (99.9% faster first request)
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:- üöß Semantic guardrail matching (embeddings not yet implemented)
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:# Initialize guardrail
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:# Expected: Should work with basic guardrails
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:# If it fails: Check logs at ~/.guardrail/logs/
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:Intelligently skips guardrails for non-code tasks:
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:# Code task - guardrails applied ‚úÖ
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:# Creative task - guardrails skipped ‚è≠Ô∏è
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:Instant guardrail loading eliminates cold-start latency:
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:pytest --cov=src/guardrail --cov-report=html
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:‚îú‚îÄ‚îÄ src/guardrail/
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:‚îî‚îÄ‚îÄ ~/.guardrail/       # User configuration & data
venv/lib/python3.12/site-packages/guardloop-2.2.0.dist-info/METADATA:    ‚îú‚îÄ‚îÄ guardrails/     # Static + dynamic rules
website/index.html:    <meta name="description" content="GuardLoop - Self-Learning AI Governance for Code. Experimental framework that learns from LLM failures and generates adaptive guardrails automatically.">
website/index.html:                        <span class="icon">‚ö†Ô∏è</span> Suggestions from guardrails:
website/index.html:                    <p>Create dynamic guardrails from failure patterns automatically</p>
website/index.html:                    <p>Smart guardrail bypass for creative work, enforcement for code</p>
website/index.html:                        <li>Semantic guardrail matching</li>
